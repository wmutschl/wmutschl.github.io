
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    [{"authors":null,"categories":null,"content":"I am an enthusiastic Apple üçè and Linux üêß user and actively contribute to several open-source projects ü§ì such as Dynare, Timeshift and timeshift-autosnap-apt. You can find üîç me on several forums #Ô∏è‚É£ like Ask Fedora, Dynare, Destination Linux, EndeavourOS, Pop!_Planet or Ubuntu.\nThe source code üìú of the entire site is available on GitHub; getting involved üëã by opening issues or pull-request üßë‚Äçüíª is greatly appreciated üôè.\nSupporting the creation of blog posts and videos is greatly appreciated.\nFeel free to contact üó£Ô∏è me directly.\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1654767075,"objectID":"e3ff26bf23578c5c98cfd1e67e232492","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"I am an enthusiastic Apple üçè and Linux üêß user and actively contribute to several open-source projects ü§ì such as Dynare, Timeshift and timeshift-autosnap-apt. You can find üîç me on several forums #Ô∏è‚É£ like Ask Fedora, Dynare, Destination Linux, EndeavourOS, Pop!","tags":null,"title":"Willi Mutschler","type":"authors"},{"authors":null,"categories":null,"content":" Image credit: Jon Rawlinson, CC BY 2.0, via Wikimedia Commons macOS: Things to do after installation (Apps, Settings, and Tweaks) In the following I will go through my post installation steps on macOS Ventura, i.e. which settings I choose and which apps I install and use.\n","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1655466439,"objectID":"b73162db66874d4576eb8a419b1b531f","permalink":"https://mutschler.dev/apple/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/apple/","section":"apple","summary":"Apple related stuff","tags":["apple"],"title":"üçè Apple","type":"book"},{"authors":null,"categories":null,"content":" Image credit: Kevin Horvat on Unsplash elementary OS: Things to do after installation (Apps, Settings, and Tweaks) In the following I will go through my post installation steps on elementary OS, i.e. which settings I choose and which apps I install and use.\nelementary OS 6.1 J√≥lnir: installation guide with btrfs, luks encryption and auto snapshots with timeshift In this guide I will walk you through the installation steps to get an elementary OS 6.1 J√≥lnir system with a luks-encrypted partition which contains a LVM logical volume for the root filesystem that is formatted with btrfs and contains a subvolume @ for / and a subvolume @home for /home. I will show how to optimize the btrfs mount options and how to setup an encrypted swap partition which works with hibernation. This layout enables one to use timeshift which will regularly take snapshots of the system and (optionally) on any apt operation.\nPop!_OS 22.04: installation guide with btrfs, luks encryption and auto snapshots with timeshift In this guide I will walk you through the installation procedure to get a Pop!_OS 22.04 system with a luks-encrypted partition which contains a LVM with a logical volume for the root filesystem that is formatted with btrfs and contains a subvolume @ for / and a subvolume @home for /home. I will show how to optimize the btrfs mount options and how to setup an encrypted swap partition which works with hibernation. This layout enables one to use timeshift which will regularly take snapshots of the system and (optionally) on any apt operation. The recovery system of Pop!_OS is also installed to the disk and accessible via the systemd bootloader.\nPop!_OS: Things to do after installation (Apps, Settings, and Tweaks) In the following I will go through my post installation steps on Pop!_OS, i.e. which settings I choose and which apps I install and use.\nFedora Workstation: Things to do after installation (Apps, Settings, and Tweaks) In the following I will go through my post installation steps on Fedora, i.e. which settings I choose and which apps I install and use.\nFedora Workstation 35 with automatic btrfs snapshots and backups using BTRBK In this guide I will show how to install Fedora 35 with automatic system snapshots and backups using BTRBK which will regularly take (almost instant) btrfs snapshots of the system and send/receive these to a backup disk given a chosen retention policy.\nDRAFT: Pop!_OS 21.10: installation guide with btrfs-LVM-luks and auto snapshots with BTRBK In this guide I will walk you through the installation procedure to get a Pop!_OS 21.10 system with a luks-encrypted partition which contains a LVM with a logical volume for the root filesystem that is formatted with btrfs and contains a subvolume @ for / and a subvolume @home for /home. I will show how to optimize the btrfs mount options and how to setup an encrypted swap partition which works with hibernation. This layout enables one to use BTRBK which will regularly take snapshots of the system and optionally on any apt operation. The recovery system of Pop!_OS is also installed to the disk and accessible via the systemd bootloader.\nPop!_OS 21.04: installation guide with btrfs-LVM-luks and auto-apt snapshots with Timeshift In this guide I will walk you through the installation procedure to get a Pop!_OS 21.04 system with a luks-encrypted partition which contains a LVM with a logical volume for the root filesystem that is formatted with btrfs and contains a subvolume @ for / and a subvolume @home for /home. I will show how to optimize the btrfs mount options and how to setup an encrypted swap partition which works with hibernation. This layout enables one to use Timeshift and timeshift-autosnap-apt which will regularly take snapshots of the system and particularly on any apt operation. The recovery system of Pop!_OS is also installed to the disk and accessible via the systemd bootloader.\nUbuntu Server Raspberry Pi: Things to do after installation (Apps, Settings, and Tweaks) In the following I will go through my post installation steps, i.e. which settings I choose and which apps and containers I install and use on my Raspberry Pi 4 (4 GB)\nUbuntu Server 20.10 on Raspberry Pi 4: installation guide with USB Boot (no SD card) and full disk encryption (excluding /boot) using btrfs-inside-luks and auto-apt snapshots with Timeshift In this guide I will walk you through the installation procedure to get an Ubuntu 20.10 system with a luks-encrypted partition for the root filesystem (excluding /boot) formatted with btrfs that contains a subvolume @ for / and a subvolume @home for /home running on a Raspberry Pi 4. The system is installed to an external bootable USB drive so no SD card is required. I will show how to optimize the btrfs mount options and how to get a headless server, i.e. remotely unlock the luks partition using Dropbear which enables one to use SSH to decrypt the luks-encrypted partitions after a reboot. This layout enables one to use ‚Ä¶","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1655466439,"objectID":"9a4cff60fde6a894338f51ef0f1c62c0","permalink":"https://mutschler.dev/linux/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/linux/","section":"linux","summary":"Linux related stuff","tags":["linux"],"title":"üêß Linux","type":"book"},{"authors":null,"categories":null,"content":" Image credit: Pete Linforth* from Pixabay My backup strategy My strategy to backup Linux, macOS and Windows machines using a combination of Nextcloud, rsync, restic, BTRBK and Time Machine.\n","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1655466439,"objectID":"82b7e8e49cdd7f3d7ac1899bce3b6985","permalink":"https://mutschler.dev/stuff/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/stuff/","section":"stuff","summary":"Other blog posts and stuff","tags":null,"title":"Stuff","type":"book"},{"authors":null,"categories":null,"content":"Please feel free to raise any comments or issues on the website‚Äôs Github repository. Pull requests are very much appreciated. Table of Contents Beware of the costs Basic steps Connect Thunderbolt docks and devices DisplayLink adapter (only for M1 MacBook Air) Arrange displays and change desktop backgrounds Install Updates for MacOS Time Machine: Backup and restore files Browsers and extensions Enable internet accounts for calendar, contacts and mails Mail Finder Preferences Terminal.app Xcode Command Line Tools Rosetta 2 Homebrew with Alias for both Intel and ARM versions Fish (A Friendly Interactive Shell) .local/bin in $PATH Dracula Theme perl: warning: Setting locale failed on servers SSH keys Private GPG key with Yubikey GPG agent forwarding Apple Apps Apps, Apps, Apps Productivity and Utilities Networking and Virtualization Text-processing Coding Communication Multimedia System Settings System extensions (if needed for kernel extensions) Apps that I keep in my dock Since January 2021 I‚Äôve been using an Apple MacBook Air (M1) as my daily driver and have switched to a MacBook Pro (M2 Max) in March 2023. Even though I have a strong Linux background, I do like macOS quite a lot. Particularly, one of the great things about macOS is the huge amount of useful and well-designed apps, tools and utilities; not only on from the App Store but also by side-loading. Therefore, in the following I will go through my post installation steps, i.e. which apps I install and use and which system preferences I choose. In other words, this guide serves as a reminder of what I set and how I use my MacBook.\nBeware of the costs As we all know, not only Apple hardware but also software comes at a hefty premium. I‚Äôve tried to write down how much I‚Äôve spent on apps and subscriptions since I started my macOS journey in January 2021, and I‚Äôve documented that below for each app. Here is a rough summary for 2021:\n700‚Ç¨ one-time on app purchases 230‚Ç¨/year on app subscriptions 240‚Ç¨/year on Apple One Family This doesn‚Äôt include the applications and subscriptions I tested and discarded, so there is probably a significant sunk costs as well. On the other hand, some apps are universal and I have bought them before on my iPhone or iPad. Moreover, some subscriptions are covered by my university.\nAnyways, pay attention to the cost if you decide to use Apple‚Äôs eco system. My tip (unfortunately not possible anymore): Try to cover the cost by buying gift cards in advance with a 15 or 20 percent bonus credit so that the cost is reduced by that percentage. I usually do this each year to at least cover my Apple One Family and other app subscriptions.\nBasic steps Note that I do the initial macOS setup without any devices connected to the MacBook.\nConnect Thunderbolt docks and devices After doing the initial steps, I use the Thunderbolt ports to connect on the one hand a LG 35WN75C-B Curved UltraWide monitor (which gives me a couple of additional USB ports) and on the other hand an Anker PowerExpand Elite 13-in-1 Thunderbolt dock. I then connect all my peripherals either to the monitor, docker or directly to the MacBook.\nDisplayLink adapter (only for M1 MacBook Air) The MacBook Air M1 chip is only able to connect to a single external monitor natively; however, using an external DisplayLink Adapter I am able to connect two or more external displays. In particular, I connect a FUJITSU Display B24-8 TS Pro in rotated mode. The quality is not great, either because of the adapter or the monitor or both, but as I am mostly using it to read PDFs, it does the job. To make this work, one has to install the DisplayLink Manager software. After installing it, one needs to activate the app in Screen Recording in the Security \u0026amp; Privacy part of System Preferences. Note that if you lock your system, there will be a message in the menu bar that Your screen is being observed.Moreover, in Notifications \u0026amp; Focus at the bottom activate When mirroring or sharing the display under Allow notifications. Furthermore, in the Apps settings, I set the rotation to 90¬∞ and set the software to launch at startup.\nArrange displays and change desktop backgrounds Go to Displays in System Preferences and arrange the displays. My MacBook is typically on a pile of books (on the left), the LG monitor is the main monitor and the rotated Dell monitor is on the right. I also choose different backgrounds for each monitor.\nInstall Updates for MacOS Before I proceed, I see whether a new version of MacOS is available. Go to System Settings, General, and Software Update. Reboot.\nTime Machine: Backup and restore files The easiest way to restore everything is to use the migration assistant, but typically I only need to restore some folders and files from my Time Machine backups (or alternatively sync from my Nextcloud server). So click on the red exclamation mark and ‚ÄúClaim existing backups‚Äù. I then do a full back and activate both automatic backups as well as displaying it in the menu bar. After the ‚Ä¶","date":1680048000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1680164840,"objectID":"532b12e2d0dad2106a7473ce9bfbb0b6","permalink":"https://mutschler.dev/apple/macos-post-install/","publishdate":"2023-03-29T00:00:00Z","relpermalink":"/apple/macos-post-install/","section":"apple","summary":"In the following I will go through my post installation steps on macOS Ventura, i.e. which settings I choose and which apps I install and use.","tags":["apple","macos","post-installation"],"title":"macOS: Things to do after installation (Apps, Settings, and Tweaks)","type":"book"},{"authors":null,"categories":null,"content":"Please feel free to raise any comments or issues on the website‚Äôs Github repository. Pull requests are very much appreciated\nIn the following I will go through my post installation steps, i.e. which settings I choose and which apps I install and use.\nTable of Contents Basic Steps Go through System Settings Set hostname Install Required Drivers Install software-properties-common deb-get to install third-party software on Ubuntu easily Restore from Backup Install updates and reboot Browser Fish - A Friendly Interactive Shell SSH keys Apps Snap support System utilities Networking Coding Text-processing Communication Multimedia Misc tweaks and settings Security steps with Yubikey To Do Basic Steps Go through System Settings Desktop Choose a Wallpaper Choose Appearance Default Schedule ‚ÄòSunset to Sunrise‚Äô Accent: Mint Text Size 1.00 disable Dyslexia-friendly Dock \u0026amp; Panel Icon size ‚Äòsmall‚Äô Turn on Hide when ‚ÄòAny window overlaps the dock‚Äô Turn off Hide when ‚ÄòPressure reveal‚Äô Turn on ‚Äô Panel translucency\u0026#39; Multitasking Do nothing for the corners Activate Move windows to a new workspace ‚ÄòWhen entering fullscreen‚Äô Deactivate Move windows to a new workspace ‚ÄòWhen maximizing‚Äô Activate ‚ÄòWindow animations‚Äô Language \u0026amp; Region For some reason elementary OS installs a bunch of languages which unnecessarily increases the system updates. So to speed this up, I remove all the languages that I do not need and keep only ‚ÄòEnglish‚Äô and ‚ÄòGerman‚Äô. This takes some clicking and unfortunately the system settings don‚Äôt show the progress until you re-open the settings dialog. At the end click ‚ÄòComplete Installation‚Äô to install missing language support for the remaining languages. Re-open the dialog and change:\nRegion: United States Formats: Germany Temperature: Celsius Confirm with ‚ÄòSet Language‚Äô. Open a terminal and update the locales:\nsudo locale-gen de_DE.UTF.8 sudo locale-gen en_US.UTF.8 sudo update-locale LANG=en_US.UTF-8 Notifications I leave everything turned on at the beginning and re-visit this settings panel for applications that bother me. Mostly I deactivate the ‚ÄòSounds‚Äô switch for those applications.\nSecurity \u0026amp; Privacy History I enable it and check all ‚ÄòData Sources‚Äô. Locking Activate ‚ÄòLock on suspend‚Äô Activate ‚ÄòLock after screen turns off‚Äô Activate ‚ÄòForbid new USB devices when locked‚Äô Firewall As this is a desktop computer, I do not need the Firewall or adapt any settings Housekeeping ‚ÄòAutomatically Delete‚Äô: ‚ÄòOld temporary files‚Äô and ‚ÄòTrashed files‚Äô ‚ÄòDelete Old Files After:‚Äô 30 days Location Services: I enable this by default and re-visit this setting after installing other applications Displays I use a Thunderbolt Dock (either a DELL TB16 or a Anker PowerExpand Elite 13-in-1 or a builtin dock of my LG 38 curved monitor). Setting this up is sometimes a bit fiddly, so in this settings panel I try to arrange them correctly and check the ‚ÄòScaling factor‚Äô. I also activate ‚ÄòNight Light‚Äô mode with ‚ÄòSunset to Sunrise‚Äô.\nKeyboard I change the behavior of the SUPER key to show the ‚ÄòMultitasking View‚Äô. Then I go through the Shortcuts page. I typically try to use the distro‚Äôs default shortcuts and change them only if I keep forgetting them or persistently use other shortcuts which are in my muscle memory. I don‚Äôt change the Behavior settings as they are fine with me.\nMouse \u0026amp; Touchpad Go through the settings, but I usually stick to the defaults. For my external mouse I make sure that ‚ÄòNatural Scrolling‚Äô is turned off, whereas for a Touchpad I like to turn it on.\nPower Turn off display when inactive for: 15 min Power button: Prompt to shutdown Suspend when inactive for 30 min Printers My printer is connected to the network, so usually it is automatically detected.\nSound Deactivate ‚ÄòEvent alerts‚Äô Wacom I don‚Äôt have a Wacom tablet.\nBluetooth On my Desktop computer I typically deactivate Bluetooth unless I really need it. Sometimes deactivating it in the system settings does not work, but from the panel you can deactivate it just fine.\nNetwork Even though my computer is connected via LAN, I also enter my WiFi password.\nOnline Accounts I add a CalDAV account pointing towards my Nextcloud.\nSharing I typically don‚Äôt use this feature and deactivate ‚ÄòMedia Library‚Äô.\nDate \u0026amp; Time Time format: 24-hour Time zone: deactivate ‚ÄòBased on location‚Äô and choose Europe-Berlin-Germany (most areas) Activate ‚ÄòNetwork time‚Äô Deactivate ‚ÄòShow week numbers‚Äô Show in Panel: ‚ÄòDate‚Äô, ‚ÄòDay of the week Screen Time \u0026amp; Limits I don‚Äôt use this feature.\nSystem Nothing to do here.\nUniversal Access I don‚Äôt use any features here.\nUser Accounts I change my profile picture.\nSet hostname When creating a user, you can also choose the name of your computer for better accessability on the network. If I forgot to do this, I change it with:\nhostnamectl set-hostname green-lantern Install Required Drivers Not all drivers are installed, particularly proprietary drivers Nvidia GPUs or special WiFi drivers need to be manually installed to get the maximum performance from your system:\nsudo ‚Ä¶","date":1655337600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1655458893,"objectID":"1211017cd8cef9525178d7d11a386688","permalink":"https://mutschler.dev/linux/elementary-os-post-install/","publishdate":"2022-06-16T00:00:00Z","relpermalink":"/linux/elementary-os-post-install/","section":"linux","summary":"In the following I will go through my post installation steps on elementary OS, i.e. which settings I choose and which apps I install and use.","tags":["linux","elementary-os","install guide","post-install"],"title":"elementary OS: Things to do after installation (Apps, Settings, and Tweaks)","type":"book"},{"authors":null,"categories":null,"content":"Please feel free to raise any comments or issues on the website‚Äôs Github repository. Pull requests are very much appreciated. Video coming soon\nNote that this written guide is an updated version of the video and contains much more information. Table of Contents Overview Step 0: General remarks Step 1: Prepare partitions by performing a Clean Install first [Optional] Understand the default partition layout and installation structure Step 2: Install Elementary OS using the Custom Install (Advanced) option Step 3: Post-Installation steps Mount the btrfs top-level root filesystem with zstd compression Create btrfs subvolumes @ and @home Changes to fstab Changes to crypttab Adjust configuration of grub Create a chroot environment to update initramfs and grub Step 4: Reboot, some checks, and system updates Step 5: Install timeshift and timeshift-autosnap-apt Step 6: Practice recovery and system rollback Rollback with timeshift Appendix: encrypt /boot partition Overview In this guide I will show how to install Elementary OS 6.1 J√≥lnir with the following structure:\nan unencrypted EFI partition an unencrypted boot partition (I also show how to optionally encrypt this in the appendix and why I don‚Äôt) an encrypted btrfs partition (with LVM) for the root filesystem the btrfs logical volume contains a subvolume @ for / and a subvolume @home for /home. Note that Elementary OS‚Äôs installer does not create btrfs subvolumes by default, so we need to do this manually. an encrypted swap partition which works with hibernation automatic system snapshots and easy rollback using: timeshift which will regularly take (almost instant) snapshots of the system timeshift-autosnap-apt which creates btrfs snapshot with timeshift on any system update with apt This setup works similarly well on other distributions, for which I also have installation guides (with optional RAID1).\nStep 0: General remarks This tutorial is made with Elementary OS 6.1 J√≥lnir from elementary.io copied to an installation media (usually a USB Flash device); checkout Ventoy for a neat way to organize all kinds of iso files on just one USB Flash device or USB SSD. Other versions of Elementary OS and other distributions that use the same installer (i.e. POP!_OS) might also work, but sometimes require additional steps (see my other installation guides).\nI strongly advise to try the following installation steps in a virtual machine first before doing anything like that on real hardware! For instance, you can spin up a virtual machine using e.g. the awesome quickemu project.\nStep 1: Prepare partitions by performing a Clean Install first If you already have (a previous version of) Elementary OS installed, you can safely skip this step as you have already a partition layout that will work with the installer. In my previous installation guides, I manually prepared the partitions to have full control on the individual partition sizes. However, as time moved on I noticed that I tend to stick to the default partition layout that the distros ship out of the box. So the easiest and quickest approach is to simply perform the installation twice. So, let‚Äôs run the first clean install by selecting Erase Disk and Install. I also choose to encrypt my root partition so the installer automatically creates the luks2 partition and sets up LVM. When the installation process finishes, restart your device, but reboot back into the installer to do the second custom install with btrfs.\nNow, I do like to take note of the default partition layout. So, if you want to see the structure of the automatic installation keep reading, otherwise go to the next step to perform the second installation.\n[Optional] Understand the default partition layout and installation structure So, let‚Äôs open a terminal and have a look on the default partition layout (instead of the terminal commands you can also just use Gparted for this):\n# NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT # loop0 7:0 0 2.2G 1 loop /rofs # sda 8:0 0 55.9G 0 disk # ‚îú‚îÄsda1 8:1 0 498M 0 part # ‚îú‚îÄsda2 8:2 0 4G 0 part # ‚îú‚îÄsda3 8:3 0 47.4G 0 part # ‚îî‚îÄsda4 8:4 0 4G 0 part [SWAP] # sdb 8:16 0 465.8G 0 disk # ‚îú‚îÄsdb1 8:17 0 263.1M 0 part # ‚îú‚îÄsdb2 8:18 0 976.6M 0 part # ‚îî‚îÄsdb3 8:19 0 464.6G 0 part # sdc 8:32 0 223.6G 0 disk # ‚îú‚îÄsdc1 8:33 0 100M 0 part # ‚îú‚îÄsdc2 8:34 0 16M 0 part # ‚îú‚îÄsdc3 8:35 0 223G 0 part # ‚îî‚îÄsdc4 8:36 0 517M 0 part # sdd 8:48 1 58.9G 0 disk # ‚îú‚îÄsdd1 8:49 1 58.8G 0 part # ‚îî‚îÄsdd2 8:50 1 32M 0 part I‚Äôve installed Elementary OS to a SSD which is recognized as sdb on my machine. sda is another SSD and Windows is installed on sdc. Lastly, sdd is the USB stick on which I have Ventoy installed and which contains the ISO of the installer.\nSo let‚Äôs have a closer look at the partition layout of sdb:\nsudo parted /dev/sdb unit MiB print # Model: ATA Samsung SSD 840 (scsi) # Disk /dev/sdb: 476940MiB # Sector size (logical/physical): 512B/512B # Partition Table: gpt # Disk Flags: # # Number Start End Size File system Name Flags # 1 2.00MiB 265MiB 263MiB ‚Ä¶","date":1655251200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1662982364,"objectID":"46934f0d0d199e348de384aa5d65f7a7","permalink":"https://mutschler.dev/linux/elementary-os-6-1/","publishdate":"2022-06-15T00:00:00Z","relpermalink":"/linux/elementary-os-6-1/","section":"linux","summary":"In this guide I will walk you through the installation steps to get an elementary OS 6.1 J√≥lnir system with a luks-encrypted partition which contains a LVM logical volume for the root filesystem that is formatted with btrfs and contains a subvolume @ for / and a subvolume @home for /home. I will show how to optimize the btrfs mount options and how to setup an encrypted swap partition which works with hibernation. This layout enables one to use timeshift which will regularly take snapshots of the system and (optionally) on any apt operation.","tags":["linux","elementary-os","install guide","btrfs","luks","timeshift","timeshift-autosnap-apt"],"title":"elementary OS 6.1 J√≥lnir: installation guide with btrfs, luks encryption and auto snapshots with timeshift","type":"book"},{"authors":null,"categories":null,"content":"Please feel free to raise any comments or issues on the website‚Äôs Github repository. Pull requests are very much appreciated. Note that this written guide is an updated version of the video and contains much more information. Table of Contents Overview Step 0: General remarks Step 1: Prepare partitions by performing a Clean Install first [Optional] Understand the default partition layout and installation structure Step 2: Install Pop!_OS using the Custom (Advanced) option Step 3: Post-Installation steps Mount the btrfs top-level root filesystem with zstd compression Create btrfs subvolumes @ and @home Changes to fstab Changes to crypttab Adjust configuration of kernelstub Adjust configuration of systemd bootloader Create a chroot environment and update initramfs Step 4: Reboot, some checks, and system updates Step 5: Install timeshift and timeshift-autosnap-apt Step 6: Practice recovery and system rollback Rollback with timeshift Rollback manually Overview I am exclusively using btrfs as my filesystem on all my Linux systems, see Why I (still) like btrfs. So, in this guide I will show how to install Pop!_OS 22.04 with the following structure:\nan unencrypted EFI partition for the systemd bootloader an unencrypted partition for the Pop!_OS recovery system an encrypted swap partition which works with hibernation an encrypted btrfs partition (with LVM) for the root filesystem the btrfs logical volume contains a subvolume @ for / and a subvolume @home for /home. Note that the Pop!_OS installer does not create btrfs subvolumes by default, so we need to do this manually. automatic system snapshots and easy rollback using: timeshift which will regularly take (almost instant) snapshots of the system timeshift-autosnap-apt which creates btrfs snapshot with timeshift on any system update with apt This setup works similarly well on other distributions, for which I also have installation guides (with optional RAID1).\nStep 0: General remarks This tutorial is made with Pop!_OS 22.04 from System76 copied to an installation media (usually a USB Flash device). Other versions of Pop!_OS and other distributions that use the systemd boot manager might also work, but sometimes require additional steps (see my other installation guides).\nI strongly advise to try the following installation steps in a virtual machine first before doing anything like that on real hardware! For instance, you can spin up a virtual machine using e.g. the awesome quickemu project.\nStep 1: Prepare partitions by performing a Clean Install first If you already have (a previous version of) POP!_OS installed, you can safely skip this step as you have already a partition layout that will work with the installer. In my previous installation guides, I manually prepared the partitions to have full control on the individual partition sizes. However, as time moved on I noticed that I tend to stick to the default partition layout of POP!_OS. So the easiest and quickest approach is to simply perform the installation twice. So, let‚Äôs run first the automatic Clean Install with encryption. When this finishes, do NOT Restart Device or Shut Down, but instead right-click in the dock on the Install Pop!_OS app and select Quit.\nOf course, you can adapt the partitions with Gparted to your licking. If you want to see the structure of the installation keep reading, otherwise go to the next step to perform the second Installation.\n[Optional] Understand the default partition layout and installation structure So, let‚Äôs open a terminal and have a look on the default partition layout (obviously you should probably just use Gparted for this):\nsudo lsblk # NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTS # loop0 7:0 0 2.4G 1 loop /rofs # sda 8:0 0 55.9G 0 disk # ‚îú‚îÄsda1 8:1 0 498M 0 part # ‚îú‚îÄsda2 8:2 0 4G 0 part # ‚îú‚îÄsda3 8:3 0 47.4G 0 part # ‚îî‚îÄsda4 8:4 0 4G 0 part # sdb 8:16 0 465.8G 0 disk # sdc 8:32 0 223.6G 0 disk # ‚îú‚îÄsdc1 8:33 0 100M 0 part # ‚îú‚îÄsdc2 8:34 0 16M 0 part # ‚îú‚îÄsdc3 8:35 0 223G 0 part # ‚îî‚îÄsdc4 8:36 0 517M 0 part # sdd 8:48 1 58.9G 0 disk # ‚îú‚îÄsdd1 8:49 1 58.8G 0 part # ‚îÇ ‚îî‚îÄventoy 253:0 0 2.5G 1 dm /media/pop-os/Pop_OS 22.04 amd64 # Intel # ‚îÇ /cdrom # ‚îî‚îÄsdd2 8:50 1 32M 0 part /media/pop-os/Pop_OS 22.04 amd64 Intel I‚Äôve installed POP!_OS to a small SSD which is recognized as sda on my machine. sdb is another empty ssd and Windows is installed on sdc. Lastly, sdd is a USB stick on which I have Ventoy installed and which contains the ISO of the installer.\nSo let‚Äôs have a closer look at the partition layout of sda:\nsudo parted /dev/sda unit MiB print # Model: ATA Patriot Pyro SE (scsi) # Disk /dev/sda: 57242MiB # Sector size (logical/physical): 512B/512B # Partition Table: gpt # Disk Flags: # Number Start End Size File system Name Flags # 1 2.00MiB 500MiB 498MiB fat32 boot, esp # 2 500MiB 4596MiB 4096MiB fat32 recovery msftdata # 3 4596MiB 53144MiB 48548MiB # 4 53144MiB 57240MiB 4096MiB linux-swap(v1) swap We have the following 4 partitions:\na 498 MiB FAT32 EFI partition for the ‚Ä¶","date":1653350400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1689365528,"objectID":"6c2cee08c3979bfa5ae48fc51b4cc2f8","permalink":"https://mutschler.dev/linux/pop-os-btrfs-22-04/","publishdate":"2022-05-24T00:00:00Z","relpermalink":"/linux/pop-os-btrfs-22-04/","section":"linux","summary":"In this guide I will walk you through the installation procedure to get a Pop!_OS 22.04 system with a luks-encrypted partition which contains a LVM with a logical volume for the root filesystem that is formatted with btrfs and contains a subvolume @ for / and a subvolume @home for /home. I will show how to optimize the btrfs mount options and how to setup an encrypted swap partition which works with hibernation. This layout enables one to use timeshift which will regularly take snapshots of the system and (optionally) on any apt operation. The recovery system of Pop!_OS is also installed to the disk and accessible via the systemd bootloader.","tags":["linux","pop-os","install guide","btrfs","luks","timeshift","timeshift-autosnap-apt"],"title":"Pop!_OS 22.04: installation guide with btrfs, luks encryption and auto snapshots with timeshift","type":"book"},{"authors":null,"categories":null,"content":"Impressum Angaben gem√§√ü ¬ß 5 TMG Verantwortlich f√ºr den Inhalt dieser Webseite:¬†Willi Mutschler Eberhard-Karls-Universit√§t T√ºbingen Wirtschafts- und Sozialwissenschaftlichen Fakult√§t Department of International Macroeconomics and Finance Nauklerstr. 50 D-72074 T√ºbingen willi@mutschler.dev\nHaftung f√ºr Inhalte Als Betreiber sind wir gem√§√ü ¬ß 7 Abs.1 TMG f√ºr eigene Inhalte auf diesen Seiten nach den allgemeinen Gesetzen verantwortlich. Nach ¬ß¬ß 8 bis 10 TMG sind wir jedoch nicht verpflichtet, √ºbermittelte oder gespeicherte fremde Informationen zu √ºberwachen oder nach Umst√§nden zu forschen, die auf eine rechtswidrige T√§tigkeit hinweisen. Verpflichtungen zur Entfernung oder Sperrung der Nutzung von Informationen nach den allgemeinen Gesetzen bleiben hiervon unber√ºhrt. Eine diesbez√ºgliche Haftung ist jedoch erst ab dem Zeitpunkt der Kenntnis einer konkreten Rechtsverletzung m√∂glich. Bei Bekanntwerden von entsprechenden Rechtsverletzungen werden wir diese Inhalte umgehend entfernen.\nHaftung f√ºr Links Dieses Angebot enth√§lt Links zu externen Websites Dritter, auf deren Inhalte wir keinen Einfluss haben. Deshalb k√∂nnen wir f√ºr diese fremden Inhalte auch keine Gew√§hr √ºbernehmen. F√ºr die Inhalte der verlinkten Seiten ist stets der jeweilige Anbieter oder Betreiber der Seiten verantwortlich. Die verlinkten Seiten wurden zum Zeitpunkt der Verlinkung auf m√∂gliche Rechtsverst√∂√üe √ºberpr√ºft. Rechtswidrige Inhalte waren zum Zeitpunkt der Verlinkung nicht erkennbar. Eine permanente inhaltliche Kontrolle der verlinkten Seiten ist jedoch ohne konkrete Anhaltspunkte einer Rechtsverletzung nicht zumutbar. Bei Bekanntwerden von Rechtsverletzungen werden wir derartige Links umgehend entfernen.\nUrheberrecht Die erstellten Inhalte und Werke auf diesen Seiten unterliegen dem deutschen Urheberrecht. Die Vervielf√§ltigung, Bearbeitung, Verbreitung und jede Art der Verwertung au√üerhalb der Grenzen des Urheberrechtes bed√ºrfen der schriftlichen Zustimmung des jeweiligen Autors bzw. Erstellers. Downloads und Kopien dieser Seite sind nur f√ºr den privaten, nicht kommerziellen Gebrauch gestattet. Soweit die Inhalte auf dieser Seite nicht vom Betreiber erstellt wurden, werden die Urheberrechte Dritter beachtet. Insbesondere werden Inhalte Dritter als solche gekennzeichnet. Sollten Sie trotzdem auf eine Urheberrechtsverletzung aufmerksam werden, bitten wir um einen entsprechenden Hinweis. Bei Bekanntwerden von Rechtsverletzungen werden wir derartige Inhalte umgehend entfernen.\nQuelle:¬†eRecht24 Impressum Generator\nTerms of Use / Privacy Policy Limitation of liability for contents We are responsible for our own content on these pages according to ¬ß 7 para.1 TMG (German Telemedia Act) and general laws. According to ¬ß¬ß 8 to 10 TMG we are not obliged to monitor transmitted or stored information or to investigate circumstances that indicate illegal activity. Obligations to remove or block the use of information according to the general laws remain unaffected. However, liability in this respect is only possible from the time of knowledge of a concrete infringement. If we become aware of any such legal infringements, we will remove these contents immediately.\nLimitation of liability for external links This site contains links to external websites of third parties, the contents of which we have no influence on, and therefore we cannot accept any liability for these external contents. For the contents of the linked pages is always the respective provider or operator of the sites responsible. The linked pages were checked for possible legal violations at the time of linking. Illegal contents were not recognizable at the time of linking. A permanent control of the contents of the linked pages is not reasonable without concrete evidence of a violation of law. If we become aware of any infringements, we will remove such links immediately.\nCopyright The contents and works on these pages are subject to German copyright law. The reproduction, editing, distribution and any kind of use outside the limits of copyright law require the written consent of the respective author or creator. Downloads and copies of this site are only permitted for private, non-commercial use. Insofar as the content on this site was not created by the operator, the copyrights of third parties are respected. In particular, third-party content is identified as such. Should you nevertheless become aware of a copyright infringement, please inform us accordingly. If we become aware of any infringements, we will remove such contents immediately.\nSource:¬†eRecht24 Impressum Generator\n","date":1653350400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1654767075,"objectID":"18d05a63a1c8d7ed973cc51838494e41","permalink":"https://mutschler.dev/privacy/","publishdate":"2022-05-24T00:00:00Z","relpermalink":"/privacy/","section":"","summary":"Impressum Angaben gem√§√ü ¬ß 5 TMG Verantwortlich f√ºr den Inhalt dieser Webseite:¬†Willi Mutschler Eberhard-Karls-Universit√§t T√ºbingen Wirtschafts- und Sozialwissenschaftlichen Fakult√§t Department of International Macroeconomics and Finance Nauklerstr. 50 D-72074 T√ºbingen willi@mutschler.","tags":null,"title":"Privacy Policy","type":"page"},{"authors":null,"categories":null,"content":"Please feel free to raise any comments or issues on the website‚Äôs Github repository. Pull requests are very much appreciated. In the following I will go through my post installation steps, i.e. which settings I choose and which apps I install and use. Table of Contents Basic Steps Set hostname SSH keys Security steps with Yubikey Apps Snap support System utilities Networking Coding Text-processing Communication Multimedia Misc tweaks and settings Basic Steps Set hostname By default my machine is called pop-os; hence, I rename it for better accessability on the network:\nhostnamectl set-hostname precision Change the mirror for getting updates, set locales, get rid of unnecessary languages I am living in Germany, so I adapt my locales:\nsudo sed -i \u0026#39;s|http://us.|http://de.|\u0026#39; /etc/apt/sources.list.d/system.sources sudo locale-gen de_DE.UTF.8 sudo locale-gen en_US.UTF.8 sudo update-locale LANG=en_US.UTF-8 In Region Settings open ‚ÄúManage Installed Languages‚Äù, do not update these, but first remove the unnecessary ones. Then reopen ‚Äúlanguages‚Äù and update these.\nInstall updates and reboot sudo apt update sudo apt upgrade sudo apt dist-upgrade sudo apt autoremove sudo apt autoclean sudo fwupdmgr get-devices sudo fwupdmgr get-updates sudo fwupdmgr update flatpak update sudo pop-upgrade recovery upgrade from-release # this updates the recovery partition sudo reboot now Set Hybrid Graphics Switching Graphics in Pop!_OS is easy: either use the provided extension and restart or run\nsudo system76-power graphics hybrid sudo reboot now Get Thunderbolt Dock to work and adjust monitors I use a Thunderbolt Dock (DELL TB16 or Anker PowerExpand Elite 13-in-1 or builtin into my LG 38 curved monitor), which is great but also a bit tricky to set up (see Dell TB16 Archwiki). I noticed that sometimes I just need to plug the USB-C cable in and out a couple of times to make it work (there seems to be a loose contact). Anyways, for me the most important step is to check in ‚ÄúSettings-Privacy-Thunderbolt‚Äù, whether the Thunderbolt dock works, so I can rearrange my monitors in ‚Äúmonitor settings‚Äù.\nRestore from Backup I mount my luks encrypted backup storage drive using nautilus and use rsync to copy over my files and important configuration scripts:\nexport BACKUP=/media/$USER/UUIDOFBACKUPDRIVE/@home/$USER/ sudo rsync -avuP $BACKUP/Pictures ~/ sudo rsync -avuP $BACKUP/Documents ~/ sudo rsync -avuP $BACKUP/Downloads ~/ sudo rsync -avuP $BACKUP/dynare ~/ sudo rsync -avuP $BACKUP/Images ~/ sudo rsync -avuP $BACKUP/Music ~/ sudo rsync -avuP $BACKUP/Desktop ~/ sudo rsync -avuP $BACKUP/SofortUpload ~/ sudo rsync -avuP $BACKUP/Videos ~/ sudo rsync -avuP $BACKUP/Templates ~/ sudo rsync -avuP $BACKUP/Work ~/ sudo rsync -avuP $BACKUP/.config/Nextcloud ~/.config/ sudo rsync -avuP $BACKUP/.gitkraken ~/ sudo rsync -avuP $BACKUP/.gnupg ~/ sudo rsync -avuP $BACKUP/.local/share/applications ~/.local/share/ sudo rsync -avuP $BACKUP/.matlab ~/ sudo rsync -avuP $BACKUP/.ssh ~/ sudo rsync -avuP $BACKUP/.dynare ~/ sudo rsync -avuP $BACKUP/.gitconfig ~/ sudo chown -R $USER:$USER /home/$USER Sync Firefox to access password manager I use Firefox and like to keep my bookmarks and extensions in sync. Particularly, I use Bitwarden for all my passwords.\nSSH keys If I want to create a new SSH key, I run e.g.:\nssh-keygen -t ed25519 -C \u0026#34;popos-on-precision\u0026#34; Usually, however, I restore my .ssh folder from my backup (see above). Either way, afterwards, one needs to add the file containing your key, usually id_rsa or id_ed25519, to the ssh-agent:\neval \u0026#34;$(ssh-agent -s)\u0026#34; #works in bash eval (ssh-agent -c) #works in fish ssh-add ~/.ssh/id_ed25519 Don‚Äôt forget to add your public key to GitHub, Gitlab, Servers, etc.\nSecurity steps with Yubikey I have two Yubikeys and use them\nas second-factor for all admin/sudo tasks to unlock my luks encrypted partitions for my private GPG key For this I need to install several packages:\nsudo apt install -y yubikey-manager yubikey-personalization # some common packages # Insert the yubikey ykman info # your key should be recognized # Device type: YubiKey 5 NFC # Serial number: # Firmware version: 5.1.2 # Form factor: Keychain (USB-A) # Enabled USB interfaces: OTP+FIDO+CCID # NFC interface is enabled. # # Applications\tUSB NFC # OTP Enabled\tEnabled # FIDO U2F\tEnabled\tEnabled # OpenPGP Enabled\tEnabled # PIV Enabled\tDisabled\t# OATH Enabled\tEnabled # FIDO2 Enabled\tEnabled sudo apt install -y libpam-u2f # second-factor for sudo commands sudo apt install -y yubikey-luks # second-factor for luks sudo apt install -y gpg scdaemon gnupg-agent pcscd gnupg2 # stuff for GPG Make sure that OpenPGP and PIV are enabled on both Yubikeys as shown above.\nYubikey: two-factor authentication for admin/sudo password Let‚Äôs set up the Yubikeys as second-factor for everything related to sudo using the common-auth pam.d module:\npamu2fcfg \u0026gt; ~/u2f_keys # When your device begins flashing, touch the metal contact to confirm the association. You might need to insert a user pin as ‚Ä¶","date":1652313600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1655466439,"objectID":"a504022fea30751bc4a2221fcf1eb35b","permalink":"https://mutschler.dev/linux/pop-os-post-install/","publishdate":"2022-05-12T00:00:00Z","relpermalink":"/linux/pop-os-post-install/","section":"linux","summary":"In the following I will go through my post installation steps on Pop!_OS, i.e. which settings I choose and which apps I install and use.","tags":["linux","pop-os","install guide","post install"],"title":"Pop!_OS: Things to do after installation (Apps, Settings, and Tweaks)","type":"book"},{"authors":null,"categories":null,"content":"Please feel free to raise any comments or issues on the website‚Äôs Github repository. Pull requests are very much appreciated. Table of Contents Challenges Overview Machines and Tools Lenovo SR655 server Apple MacBook Air M1 (macOS BigSur) Dell XPS 13 9360 (Windows) Dell Precision 7520 (Linux) Honor Magicbook Pro (Windows) GitHub and Gitlab VPS (Ubuntu Server) This post serves as a mental note to me (and my relatives) about my backup strategy. Of course, this is work-in-progress and not perfect, so I will update this post from time to time. Any comments, questions, and suggestions are much appreciated.\nThe exact commands and scripts I use are given in this GitHub repository.\nChallenges The year 2022 just started and and I have taken this as an opportunity to improve my backup strategy for the various machines I take care of. One difficulty is definitely that the computers run different operating systems (Linux, macOS, Windows). Some computers I don‚Äôt use regularly (like my wife‚Äôs laptop) and some I don‚Äôt use at all (like my parent‚Äôs laptop). My goal is to have both snapshots of data so one can go back in time, but also to have several layers of redundancy and some safe-nets just in case. Moreover, I want to store my backups at different locations like at home, at the office, at my parents house and also in the cloud. So these are more-or-less the challenges. Lastly, I also like to keep a copy/mirror and backup of my repositories from GitHub and Gitlab. Luckily, I have access to both a very powerful server (in a data rack at my university) and a VPS with 40 TB of storage, so I am able to overcome these challenges in order to keep all the machines both in sync but also to create automatic incremental snapshots and backups not only locally but also off-side.\nOverview Here is a graphical overview of my backup strategy (I used mermaid for the diagram, you might need to refresh your browser several times to make it appear):\ngraph TB macbook{{\u0026#34;Apple MacBook Air (M1)internal 1TB SSD(MacOS Big Sur, encrypted APFS)@Home or @Office\u0026#34;}} xps{{\u0026#34;DELL XPS 13 (9360)internal 1TB NVME(Windows, NTFS, Bitlocker)@Home\u0026#34;}} precision{{\u0026#34;DELL PRECISION 7520internal 512 GB NVME(Fedora/POP!_OS, btrfs, LUKS)@Home\u0026#34;}} precision_sda[[\u0026#34;Internal 512 GB SSD(btrfs, LUKS)@Home\u0026#34;]] honor{{\u0026#34;HONOR MAGICBOOK PRO LAPTOPinternal 256GB SSD(Windows, NTFS, Bitlocker)@Parents\u0026#34;}} simba[(\u0026#34;LENOVO SR655 SERVER (POP!_OS)System: 2x internal 128 GB SDD (Hardware-RAID1, btrfs)Docker: 2x internal 4 TB HDD (Hardware-RAID1, LUKS, btrfs)Scratch: internal 2 TB NVME (ext4)Server Rack @Work\u0026#34;)] simba_2[[\u0026#34;2x Internal 4 TB HDD(Hardware-RAID1, LUKS, btrfs)Server Rack @Work\u0026#34;]] fifei[(\u0026#34;UBUNTU VPSSystem: internal 100GB HDD (btrfs)Backup: 40 TB HDD (LUKS, ext4)Datacenter @Frankfurt\u0026#34;)] git[(\u0026#34;GitHub \u0026amp; GitlabRepositories\u0026#34;)] T5_home[[\u0026#34;External 1 TB SSD(encrypted APFS)@Home (Docking Station)\u0026#34;]] T5_office[[\u0026#34;External 1 TB SSD(encrypted APFS)@Office (Docking Station)\u0026#34;]] T7[[\u0026#34;External 1 TB SSD(exFAT)@Home\u0026#34;]] porsche[[\u0026#34;External 2 TB HDD(exFAT)@Parents\u0026#34;]] cnmemory[[\u0026#34;External 1.5 TB HDD(exFAT)@Office\u0026#34;]] T5_office ---|\u0026#34;Time Machine(hourly snapshots)\u0026#34;| macbook T5_home ---|\u0026#34;Time Machine(hourly snapshots)\u0026#34;| macbook macbook ----|\u0026#34;Nextcloud(sync)\u0026#34;| simba macbook ---|\u0026#34;Time Machine(hourly snapshots)\u0026#34;| macbook simba ---|\u0026#34;BTRBK SnapshotsDocker + System(hourly btrfs snapshots)\u0026#34;| simba simba_2 ---|\u0026#34;BTRBK BackupDocker + System(hourly btrfs send/receive)\u0026#34;| simba cnmemory ---|\u0026#34;restic BackupDocker(monthly snapshots)\u0026#34;| simba simba ----|\u0026#34;restic BackupDocker(daily snapshots)\u0026#34;| fifei xps ----|\u0026#34;Nextcloud(sync)\u0026#34;| simba T7 ---|\u0026#34;restic BackupUser Files(weekly snapshots)\u0026#34;| xps porsche ---|\u0026#34;restic BackupUser Files(quarterly snapshots)\u0026#34;| xps simba ---|\u0026#34;Nextcloud(sync)\u0026#34;| precision precision ---|\u0026#34;BTRBK Snapshots(hourly btrfs snapshots)\u0026#34;| precision precision ---|\u0026#34;BTRBK Backup(hourly btrfs send/receive)\u0026#34;| precision_sda simba ----|\u0026#34;Nextcloud(sync)\u0026#34;| honor simba ---|\u0026#34;Gitea(mirror)\u0026#34;| git The most important piece of my backup strategy is Nextcloud which runs on my Lenovo SR655 server that I use for research purposes (located in a data rack at my university, but I have total admin access to it). This enables me to sync data between machines (which is one layer of redundancy); however, if I mess something up on one machine this will spread to all of my other machines. Therefore, I take incremental hourly snapshots and backups of all data on the server. With this I can restore data for all of my machines from different points in time, which is very important as corrupt files or malware stays often undetected for quite some time. I run a full-blown POP!_OS install on my server to be able to access it via remote desktop in order to do my research (estimations and simulations) on it. The system is installed on two 128 GB SSDs, formatted with btrfs for automatic snapshots, and set up as RAID1 by a Hardware RAID controller. I run my research on a very fast 2 TB NVME drive (no RAID required, formatted with ext4) as this is used for ‚Ä¶","date":1642032000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1655466439,"objectID":"e5ea76926ae9d25009ccdd3741190d75","permalink":"https://mutschler.dev/stuff/backup/","publishdate":"2022-01-13T00:00:00Z","relpermalink":"/stuff/backup/","section":"stuff","summary":"My strategy to backup Linux, macOS and Windows machines using a combination of Nextcloud, rsync, restic, BTRBK and Time Machine.","tags":["backup","linux","macos","apple","windows","nextcloud","rsync","restic","btrbk","time machine","minio","btrfs","ntfs","exfat","apfs"],"title":"My backup strategy","type":"book"},{"authors":null,"categories":null,"content":"Please feel free to raise any comments or issues on the website‚Äôs Github repository. Pull requests are very much appreciated. In the following I will go through my post installation steps, i.e. which settings I choose and which apps I install and use. Table of Contents Basic Steps Go through welcome screen Get Thunderbolt Dock to work and adjust monitors Wayland or Xorg Nvidia DNF flags Set hostname Check locales btrfs filesystem optimizations Install updates and reboot Fish - A Friendly Interactive Shell Gnome Extensions and Tweaks Additional repositories Flatpak support Snap support Restore from Backup SSH keys Pop theme Install Pop-Shell Tiling Extension Pop GTK theme Pop icon theme Pop fonts Pop Gnome Terminal Theme Security steps with Yubikey Yubikey: two-factor authentication for admin/sudo password Yubikey: two-factor authentication for luks Yubikey: private GPG key Apps Browser System utilities Networking Coding Text-processing Communication Multimedia Gnome Settings Other stuff Basic Steps Go through welcome screen This is self-explanatory. Usually I already set up Online Accounts for Nextcloud.\nGet Thunderbolt Dock to work and adjust monitors I use a Thunderbolt Dock (DELL TB16) with three monitors, which is great but also a bit tricky to set up. The most important step is to check in ‚ÄúSettings-Privacy-Thunderbolt‚Äù, whether ‚ÄúDell Thunderbord Cable‚Äù and ‚ÄúDell Thunderbord Dock‚Äù are both set to ‚ÄúAuthorized‚Äù. You may need to go into your BIOS to make some changes as outlined on the Dell TB16 Archwiki. I noticed that sometimes I just need to plug the USB-C cable in and out a couple of times or turn it around to make it work. A reboot might help as well. Once it works, it usually keeps working, so this is annoying just for a short time :-) Once it works, I can arrange my three monitors in ‚ÄúSettings-Display‚Äù.\nWayland or Xorg By Default Wayland is enabled. If you have a Nvidia card this is not working well, so you would have to disable it. Also MATLAB seems to work better on Xorg than Wayland, but I still need to test this. Anyways, on my Dell XPS 13 I usually stick to Wayland, whereas on my Dell Precision 7520 I disable it by uncommenting WaylandEnable=false and adding DefaultSession=gnome-xorg.desktop to the [daemon] section of /etc/gdm/custom.conf:\nsudo nano /etc/gdm/custom.conf # [daemon] # WaylandEnable=false # DefaultSession=gnome-xorg.desktop Next time you reboot the system it will boot into an Xorg Gnome session.\nNvidia If you have a Nvidia card, run Xorg and the following:\nmodinfo -F version nvidia sudo dnf update -y # and reboot if you are not on the latest kernel sudo dnf install -y akmod-nvidia # rhel/centos users can use kmod-nvidia instead sudo dnf install -y xorg-x11-drv-nvidia-cuda #optional for cuda/nvdec/nvenc support sudo dnf install -y xorg-x11-drv-nvidia-cuda-libs sudo dnf install -y vdpauinfo libva-vdpau-driver libva-utils sudo dnf install -y vulkan modinfo -F version nvidia DNF flags I add some flags to the dnf conf file to speed it up:\necho \u0026#39;fastestmirror=1\u0026#39; | sudo tee -a /etc/dnf/dnf.conf echo \u0026#39;max_parallel_downloads=10\u0026#39; | sudo tee -a /etc/dnf/dnf.conf echo \u0026#39;deltarpm=true\u0026#39; | sudo tee -a /etc/dnf/dnf.conf cat /etc/dnf/dnf.conf # [main] # gpgcheck=1 # installonly_limit=3 # clean_requirements_on_remove=True # best=False # skip_if_unavailable=True # fastestmirror=1 # max_parallel_downloads=10 # deltarpm=true Set hostname By default my machine is called localhost; hence, I rename it for better accessability on the network:\nhostnamectl set-hostname fedora Check locales Let‚Äôs check if the locales and timezone is correctly set:\nlocalectl status # System Locale: LANG=de_DE.UTF-8 # VC Keymap: de-nodeadkeys # X11 Layout: de # X11 Variant: nodeadkeys timedatectl # Local time: Di 2020-11-03 13:58:54 CET # Universal time: Di 2020-11-03 12:58:54 UTC # RTC time: Di 2020-11-03 12:58:54 # Time zone: Europe/Berlin (CET, +0100) # System clock synchronized: yes # NTP service: active # RTC in local TZ: no Looks good, if not see the help file on the two commands or change locales and timezone in Gnome-Settings.\nbtrfs filesystem optimizations Fedora has not optimized the mount options for btrfs yet. I have found that there is some general agreement on the following mount options if you are on a SSD or NVME:\nssd: use SSD specific options for optimal use on SSD and NVME noatime: prevent frequent disk writes by instructing the Linux kernel not to store the last access time of files and folders space_cache=v2: allows btrfs to store free space cache on the disk to make caching of a block group much quicker commit=120: time interval in which data is written to the filesystem (value of 120 is taken from Manjaro‚Äôs minimal iso) compress=zstd: allows to specify the compression algorithm which we want to use. btrfs provides lzo, zstd and zlib compression algorithms. Based on some Phoronix test cases, zstd seems to be the better performing candidate. discard=async: Btrfs Async Discard Support Looks To Be Ready For ‚Ä¶","date":1640995200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1669106040,"objectID":"f226b889a998dcb330179ee2c30b7baa","permalink":"https://mutschler.dev/linux/fedora-post-install/","publishdate":"2022-01-01T00:00:00Z","relpermalink":"/linux/fedora-post-install/","section":"linux","summary":"In the following I will go through my post installation steps on Fedora, i.e. which settings I choose and which apps I install and use.","tags":["linux","fedora","install guide","btrfs","luks","timeshift"],"title":"Fedora Workstation: Things to do after installation (Apps, Settings, and Tweaks)","type":"book"},{"authors":null,"categories":null,"content":"Please feel free to raise any comments or issues on the website‚Äôs Github repository. Pull requests are very much appreciated. Table of Contents Overview Step 0: General remarks Step 1: Graphical installer with automatic configuration and encryption Step 2 (optional): Understand the partition layout and installation structure Step 3: Post-Installation steps Step 3a: Mount the btrfs top-level filesystem to /btrfs_pool Step 3b (optionally): use optimized mount options Step 4: automatic snapshots and backups with btrfs using BTRBK Step 4a: preparations Step 4b: install and configure BTRBK for snapshots Step 4c: create systemd timer for BTRBK to run every hour Step 5 (optional): Mount an encrypted backup disk as btrfs send/receive target Step 5a: Preparations Step 5b: Add target for btrfs send/receive in BTRBK configuration file Final remarks Overview Since Fedora switched their default filesystem to btrfs I decided to give it a go as I am exclusively using btrfs on all my systems, see: Why I (still) like btrfs. Fedora‚Äôs automatic installation routine with encryption is actually almost perfect for me except some changes regarding the btrfs mount options.\nSo, in this guide I will show how to install Fedora 35 with automatic system snapshots and backups using BTRBK which will regularly take (almost instant) btrfs snapshots of the system and send/receive these to a backup disk given a chosen retention policy.1\nIf you ever need to rollback your system, checkout Restoring backups with BTRBK.\nStep 0: General remarks I strongly advise to try the following installation steps in a virtual machine first before doing anything like that on real hardware!\nSo, let‚Äôs spin up a virtual machine with 4 cores, 8 GB RAM, and a 64GB disk using e.g. the awesome quickemu project. I can confirm that the installation works equally well on my Dell XPS 13 9360 and my Dell Precision 7520. In the following, however, I outline the steps for my Dell Precision 7520 with a NVME drive which I use for the system files and another SSD which is used for btrfs backups.\nThis tutorial is made with Fedora 35 Workstation from https://getfedora.org/de/workstation/download/ copied to an installation media (usually a USB Flash device but may be a DVD or the ISO file attached to a virtual machine hypervisor).\nStep 1: Graphical installer with automatic configuration and encryption Boot the installation medium in UEFI mode and choose Install to Hard Drive. Choose your language, Keyboard, Time \u0026amp; Date setting. Note that the Done button is in the top left corner. Then hit Installation Destination. Choose your harddisk and\nselect Automatic under Storage Configuration Encrypt my data under Encryption Click Done and enter your disk encryption passphrase, choose a good one. If there is still data on your disk, you need to choose Reclaim space and remove existing file systems that you don‚Äôt need anymore. I usually hit Delete all. After you‚Äôve finished select Reclaim space. You will return to the Installation Summary screen. Click Begin Installation (in the lower right corner). When the installation process is finished, select Finish Installation. Reboot your system and go through the welcome screen. I also enable Third-party repositories already.\nLet‚Äôs update the system (either via software center or the terminal):\nsudo dnf update flatpak update Reboot one more time:\nsudo reboot now Step 2 (optional): Understand the partition layout and installation structure This is just for your nerdy side if you want to familiarize yourself with some commands that are useful when working with btrfs, partition layouts, and mount points.\nSo, let‚Äôs open a terminal and have a look on the default partition layout:\nsudo lsblk # NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTS # sda 8:0 0 465.8G 0 disk # ‚îî‚îÄsda1 8:1 0 465.8G 0 part # zram0 252:0 0 8G 0 disk [SWAP] # nvme0n1 259:0 0 476.9G 0 disk # ‚îú‚îÄnvme0n1p1 259:1 0 600M 0 part /boot/efi # ‚îú‚îÄnvme0n1p2 259:2 0 1G 0 part /boot # ‚îî‚îÄnvme0n1p3 259:3 0 475.4G 0 part # ‚îî‚îÄluks-8bf48ffa-78e1-4a16-ad9e-301b7199d8ac 253:0 0 475.3G 0 crypt /home # / sudo parted /dev/nvme0n1 unit MiB print # Model: PM961 NVMe SAMSUNG 512GB (nvme) # Disk /dev/nvme0n1: 488386MiB # Sector size (logical/physical): 512B/512B # Partition Table: gpt # Disk Flags: # # Number Start End Size File system Name Flags # 1 1.00MiB 601MiB 600MiB fat32 EFI System Partition boot, esp # 2 601MiB 1625MiB 1024MiB ext4 # 3 1625MiB 488386MiB 486761MiB sudo blkid # /dev/nvme0n1p3: UUID=\u0026#34;8bf48ffa-78e1-4a16-ad9e-301b7199d8ac\u0026#34; TYPE=\u0026#34;crypto_LUKS\u0026#34; PARTUUID=\u0026#34;16845b99-3bf4-4b22-9afb-095a16c12b67\u0026#34; # /dev/nvme0n1p1: UUID=\u0026#34;4882-915D\u0026#34; BLOCK_SIZE=\u0026#34;512\u0026#34; TYPE=\u0026#34;vfat\u0026#34; PARTLABEL=\u0026#34;EFI System Partition\u0026#34; PARTUUID=\u0026#34;6f530168-0cb2-4f89-9b7e-318f92b6b60f\u0026#34; # /dev/nvme0n1p2: UUID=\u0026#34;c791c518-83e5-4dd5-8cdf-a47621f9019b\u0026#34; BLOCK_SIZE=\u0026#34;4096\u0026#34; TYPE=\u0026#34;ext4\u0026#34; PARTUUID=\u0026#34;13e37336-cf10-4df6-aecf-2781050aeb79\u0026#34; # /dev/mapper/luks-8bf48ffa-78e1-4a16-ad9e-301b7199d8ac: LABEL=\u0026#34;fedora_localhost-live\u0026#34; UUID=\u0026#34;df2d4761-d84b-4fea-af88-2dd5d7eeca4c\u0026#34; ‚Ä¶","date":1639440000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1655466439,"objectID":"c4e96892cece602d1ea1d613783c301b","permalink":"https://mutschler.dev/linux/fedora-btrfs-35/","publishdate":"2021-12-14T00:00:00Z","relpermalink":"/linux/fedora-btrfs-35/","section":"linux","summary":"In this guide I will show how to install Fedora 35 with automatic system snapshots and backups using BTRBK which will regularly take (almost instant) btrfs snapshots of the system and send/receive these to a backup disk given a chosen retention policy.","tags":["linux","fedora","install guide","btrfs","luks","timeshift"],"title":"Fedora Workstation 35 with automatic btrfs snapshots and backups using BTRBK","type":"book"},{"authors":null,"categories":null,"content":"Please feel free to raise any comments or issues on the website‚Äôs Github repository. Pull requests are very much appreciated. Table of Contents Overview Step 0: General remarks Step 1a: Boot the install and perform a Clean Install with encryption Step 1b (optional): Understand the partition layout and installation structure Step 2: Install Pop!_OS using the Custom (Advanced) option Step 3: Post-Installation steps Mount the btrfs top-level root filesystem Create btrfs subvolumes @ and @home Changes to fstab Changes to crypttab Adjust configuration of kernelstub Adjust configuration of systemd bootloader Create a chroot environment and update initramfs Step 4: Reboot, some checks, and update system Step 5: automatic snapshots and backups with btrfs using BTRBK Step 5a: preparations Step 5b: install and configure BTRBK Step 5c: create systemd timer for BTRBK to run every hour Step 5d (optional): Mount an encrypted backup disk as btrfs send/receive target Step 5e (optional): Automatic snapshots for any apt operation Overview I am exclusively using btrfs as my filesystem on all my Linux systems, see Why I (still) like btrfs. So, in this guide I will show how to install Pop!_OS 21.10 with the following structure:\nan unencrypted EFI partition for the systemd bootloader an unencrypted partition for the Pop!_OS recovery system an encrypted swap partition which works with hibernation a btrfs-LVM-inside-luks partition for the root filesystem the btrfs logical volume contains a subvolume @ for / and a subvolume @home for /home. Note that the Pop!_OS installer does not create any subvolumes on btrfs, so we need to do this manually. automatic system snapshots and easy rollback similar to zsys using BTRBK which will regularly take (almost instant) snapshots of the system and (optionally) also on any apt operation This setup works similarly well on other distributions, for which I also have installation guides with optional RAID1.\nStep 0: General remarks This tutorial is made with Pop!_OS 21.10 from https://system76.com/pop copied to an installation media (usually a USB Flash device but may be a DVD or the ISO file attached to a virtual machine hypervisor). Other versions of Pop!_OS and other distributions that use Systemd boot manager might also work, but sometimes require additional steps (see my other installation guides).\nI strongly advise to try the following installation steps in a virtual machine first before doing anything like that on real hardware! For instance, you can spin up a virtual machine with 4 cores, 8 GB RAM, and a 64GB disk using e.g. the awesome quickemu project.\nIn the following, however, I outline the steps for my Dell Precision 7520 with a NVME drive which I use for the system files and another SSD which is used for btrfs backups.\nStep 1a: Boot the install and perform a Clean Install with encryption In previous installation guides I prepared the partitions manually; however, as I am basically using the same layout as the automatic POP!_OS installer with the only difference that I want to use btrfs instead of EXT4 as the filesystem, I simply perform the installation twice. The first one is the automatic Clean Install with encryption. When this finishes, do NOT Restart Device or Shut Down but instead right-click in the dock on the Install Pop!_OS app and select Quit.\nIf you want to see the structure of the installation keep reading, otherwise go to the next step to perform the second Installation.\nStep 1b (optional): Understand the partition layout and installation structure So, let‚Äôs open a terminal and have a look on the default partition layout:\nsudo lsblk # NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT # loop0 7:0 0 2.8G 1 loop /rofs # sda 8:0 0 465.8G 0 disk # ‚îî‚îÄsda1 8:1 0 465.8G 0 part # sdb 8:16 1 3.7G 0 disk # ‚îú‚îÄsdb1 8:17 1 2.9G 0 part /cdrom # ‚îú‚îÄsdb2 8:18 1 4M 0 part # ‚îî‚îÄsdb3 8:19 1 843.5M 0 part /var/crash # nvme0n1 259:0 0 476.9G 0 disk # ‚îú‚îÄnvme0n1p1 259:1 0 498M 0 part # ‚îú‚îÄnvme0n1p2 259:2 0 4G 0 part # ‚îî‚îÄnvme0n1p3 259:3 0 468.4G 0 part # ‚îú‚îÄnvme0n1p4 259:4 0 4G 0 part sudo parted /dev/nvme0n1 unit MiB print # Model: PM961 NVMe SAMSUNG 512GB (nvme) # Disk /dev/nvme0n1: 488386MiB # Sector size (logical/physical): 512B/512B # Partition Table: gpt # Disk Flags: # # Number Start End Size File system Name Flags # 1 2.00MiB 500MiB 498MiB fat32 EFI boot, esp # 2 500MiB 4596MiB 4096MiB fat32 recovery msftdata # 3 4596MiB 484288MiB 479692MiB # 4 484288MiB 488384MiB 4096MiB linux-swap(v1) swap In my case sda is an internal SSD that I use for my backup strategy, whereas sdb is the flash drive that contains the installation files. So, for me the installation target device is called nvme0n1 and it has 4 partitions:\na 498 MiB FAT32 EFI partition for the systemd bootloader a 4096 MiB FAT32 partition for the Pop!_OS recovery system a 479692MiB partition that contains the luks2 encrypted system files a 4096 MiB swap partition for (encrypted) swap use Let‚Äôs have a closer look at the luks2-encrypted partition:\nsudo ‚Ä¶","date":1639353600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1655466439,"objectID":"1d3c6e9ea82dcf0c6f69ea84dff00940","permalink":"https://mutschler.dev/linux/pop-os-btrfs-21-10/","publishdate":"2021-12-13T00:00:00Z","relpermalink":"/linux/pop-os-btrfs-21-10/","section":"linux","summary":"In this guide I will walk you through the installation procedure to get a Pop!_OS 21.10 system with a luks-encrypted partition which contains a LVM with a logical volume for the root filesystem that is formatted with btrfs and contains a subvolume @ for / and a subvolume @home for /home. I will show how to optimize the btrfs mount options and how to setup an encrypted swap partition which works with hibernation. This layout enables one to use BTRBK which will regularly take snapshots of the system and optionally on any apt operation. The recovery system of Pop!_OS is also installed to the disk and accessible via the systemd bootloader.","tags":["linux","pop-os","install guide","btrfs","luks","timeshift","timeshift-autosnap-apt"],"title":"DRAFT: Pop!_OS 21.10: installation guide with btrfs-LVM-luks and auto snapshots with BTRBK","type":"book"},{"authors":null,"categories":null,"content":"Please feel free to raise any comments or issues on the website‚Äôs Github repository. Pull requests are very much appreciated. Note that this written guide is an updated version of the video and contains much more information. Table of Contents Overview Step 0: General remarks Step 1: Boot the install and open an interactive root shell Step 2: Prepare partitions manually Create partition table and layout Create luks2 partition, LVM and btrfs root filesystem Step 3: Install Pop!_OS using the graphical installer Step 4: Post-Installation steps Mount the btrfs top-level root filesystem Create btrfs subvolumes @ and @home Changes to fstab and crypttab Adjust configuration of systemd bootloader and kernelstub Create a chroot environment and update initramfs Step 5: Reboot, some checks, and update system Step 6: Install Timeshift and timeshift-autosnap-apt Overview I am exclusively using btrfs as my filesystem on all my systems, see Why I (still) like btrfs. So, in this guide I will show how to install Pop!_OS 21.04 with the following structure:\nan unencrypted EFI partition for the systemd bootloader an unencrypted partition for the Pop!_OS recovery system an encrypted swap partition which works with hibernation a btrfs-LVM-inside-luks partition for the root filesystem the btrfs logical volume contains a subvolume @ for / and a subvolume @home for /home. Note that the Pop!_OS installer does not create any subvolumes on btrfs, so we need to do this manually. automatic system snapshots and easy rollback similar to zsys using: Timeshift which will regularly take (almost instant) snapshots of the system timeshift-autosnap-apt which will automatically run Timeshift on any apt operation and also keep a backup of your EFI partition inside the snapshot With this setup you basically get the same comfort of Ubuntu‚Äôs ZFS and zsys initiative, but with much more flexibility and comfort due to the awesome Timeshift program, which saved my bacon quite a few times. This setup works similarly well on other distributions, for which I also have installation guides with optional RAID1.\nIf you ever need to rollback your system, checkout Recovery and system rollback with Timeshift.\nStep 0: General remarks This tutorial is made with Pop!_OS 21.04 from https://system76.com/pop copied to an installation media (usually a USB Flash device but may be a DVD or the ISO file attached to a virtual machine hypervisor). Other versions of Pop!_OS and other distributions that use Systemd boot manager might also work, but sometimes require additional steps (see my other installation guides).\nI strongly advise to try the following installation steps in a virtual machine first before doing anything like that on real hardware! For instance, you can spin up a virtual machine with 4 cores, 8 GB RAM, and a 64GB disk using e.g. my fork of the awesome bash script quickemu.\nIn the following, however, I outline the steps for my Dell Precision 7520 with a NVME drive.\nStep 1: Boot the install and open an interactive root shell POP!_OS is a UEFI only system, so once the Live Desktop environment has started choose your language, region, and keyboard layout, then hit Try Demo Mode. Open a terminal and switch to an interactive root session:\nsudo -i You might find maximizing the terminal window is helpful for working with the command-line. Do not close this terminal window during the whole installation process until we are finished with everything.\nStep 2: Prepare partitions manually Create partition table and layout First find out the name of your drive. You can also open gparted or have a look into the /dev folder to make sure what your hard drives are called. In most cases they are called sda, sdb, sdc‚Ä¶ for normal SSD and HDD, whereas for NVME storage the naming is nvme0n1, nvme0n2, nvme0n3,‚Ä¶. I usually use the following command to get an overview:\nlsblk # NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT # loop0 7:0 0 2.6G 1 loop /rofs # sda 8:0 0 465.8G 0 disk # ‚îî‚îÄsda1 8:1 0 465.8G 0 part # sdb 8:16 1 3.7G 0 disk # ‚îú‚îÄsdb1 8:17 1 2.7G 0 part /cdrom # ‚îú‚îÄsdb2 8:18 1 4M 0 part # ‚îî‚îÄsdb3 8:19 1 1011.5M 0 part /var/crash # nvme0n1 259:0 0 476.9G 0 disk In my case sda is an internal SSD that I use for my backup strategy, whereas sdb is the flash drive that contains the installation files. So, for me the installation target device is called nvme0n1.\nWe‚Äôll now create a disk table and add four partitions on nvme0n1:\na 498 MiB FAT32 EFI partition for the systemd bootloader a 4096 MiB FAT32 partition for the Pop!_OS recovery system a 4096 MiB swap partition for encrypted swap use a luks2 encrypted partition which contains a LVM with one logical volume formatted with btrfs, which will be our root filesystem Some remarks:\nThe LVM is actually a bit of an overkill for my typical use case, but otherwise the installer cannot access the luks partition. /boot will reside on the encrypted partition. The systemd bootloader is able to decrypt this at boot time. With btrfs I do not need any other ‚Ä¶","date":1627344000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1660500681,"objectID":"38bb3bdd289113bdbe4f5f13cf9a6874","permalink":"https://mutschler.dev/linux/pop-os-btrfs-21-04/","publishdate":"2021-07-27T00:00:00Z","relpermalink":"/linux/pop-os-btrfs-21-04/","section":"linux","summary":"In this guide I will walk you through the installation procedure to get a Pop!_OS 21.04 system with a luks-encrypted partition which contains a LVM with a logical volume for the root filesystem that is formatted with btrfs and contains a subvolume @ for / and a subvolume @home for /home. I will show how to optimize the btrfs mount options and how to setup an encrypted swap partition which works with hibernation. This layout enables one to use Timeshift and timeshift-autosnap-apt which will regularly take snapshots of the system and particularly on any apt operation. The recovery system of Pop!_OS is also installed to the disk and accessible via the systemd bootloader.","tags":["linux","pop-os","install guide","btrfs","luks","timeshift","timeshift-autosnap-apt"],"title":"Pop!_OS 21.04: installation guide with btrfs-LVM-luks and auto-apt snapshots with Timeshift","type":"book"},{"authors":null,"categories":null,"content":"Please feel free to raise any comments or issues on the website‚Äôs Github repository. Pull requests are very much appreciated. In the following I will go through my post installation steps, i.e. which settings I choose and which apps I install and use on my Raspberry Pi 4 (4 GB) after installing Ubuntu Server 20.10 with btrfs-luks booted from an external USB drive. Table of Contents Basic steps Scripts Monitoring Cron Jobs with logs and healthchecks.io btrfs balance btrfs scrub Backup home directory to Wasabi using restic Backup target for btrfs send/receive with BTRBK On my Raspberry Pi On my Fedora machine ZRam [Not yet] Docker Option A: Create dedicated encrypted docker image partition Option B: Create pseudo filesystem for docker images Install docker and docker-compose Create alias Home Assistant Docker Restore backup docker-compose file Basic steps Set hostname By default the Pi is called ubuntu; but, I rename it for better accessability on the network:\nsudo hostnamectl set-hostname raspi4 Set up locales and keyboard language Even though I am based in Germany, I use en_US for my locales on my server:\nsudo locale-gen en_US.UTF-8 de_DE.UTF-8 # Generating locales (this might take a while)... # de_DE.UTF-8... done # en_US.UTF-8... done # Generation complete. sudo update-locale LANG=en_US.UTF-8 Check the timezone:\nsudo dpkg-reconfigure tzdata # Current default time zone: \u0026#39;Europe/Berlin\u0026#39; # Local time is now: Mon Jan 11 20:40:36 CET 2021. # Universal Time is now: Mon Jan 11 19:40:36 UTC 2021. and change the keyboard language to ‚Äòde‚Äô:\nL=\u0026#39;de\u0026#39; \u0026amp;\u0026amp; sudo sed -i \u0026#39;s/XKBLAYOUT=\\\u0026#34;\\w*\u0026#34;/XKBLAYOUT=\\\u0026#34;\u0026#39;$L\u0026#39;\\\u0026#34;/g\u0026#39; /etc/default/keyboard cat /etc/default/keyboard # XKBMODEL=\u0026#34;pc105\u0026#34; # XKBLAYOUT=\u0026#34;de\u0026#34; # XKBVARIANT=\u0026#34;\u0026#34; # XKBOPTIONS=\u0026#34;\u0026#34; # # BACKSPACE=\u0026#34;guess\u0026#34; Use alternate mappings for ‚Äúpage up‚Äù and ‚Äúpage down‚Äù to search the history sudo nano /etc/inputrc # Uncomment: # \u0026#34;\\e[5~\u0026#34;: history-search-backward # \u0026#34;\\e[6~\u0026#34;: history-search-forward SSH settings and SSH keys for passwordless logins Add your public keys for passwordless logins in the authorized_keys file:\nnano /home/$USER/.ssh/authorized_keys # Add public keys: # ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIB7vrYpbvJaZq2L1Gm7BrrCyl1iPCUephMZScwdentw3 XPS # ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIIfzrJ10mpCU6s4MEcCDtzILvD8gIYYzxoDAO1P9WadH iPad-iPhone # ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKX/swGeaikcTOx/7rNbyBkeJI3VMiWCkywrdLDfyqJe precision Check settings of the SSH server:\nsudo nano /etc/ssh/sshd_config # PubkeyAuthentication yes # PasswordAuthentication no # PermitRootLogin prohibit-password sudo systemctl restart ssh Before you close the Terminal, open another terminal and check whether you can SSH in without a password.\nPull server scripts from GitHub and create folder for logs Scripts I keep my log files on GitHub, so let‚Äôs clone that (private) repository (note that I spell out the scripts I use on my Pi below) and create a folder for log files:\ngit clone git@github.com:wmutschl/server-scripts.git /home/$USER/scripts mkdir -p /home/$USER/logs Monitoring Cron Jobs with logs and healthchecks.io I am runnning Cron Jobs for my maintenance scripts. To monitor these I am saving the output of the scripts into my logs folder. Moreover, I am using healthchecks.io such that in case a script does not succeed or is not executed on time I get a warning via email. In the scripts below the BASEURL environmental variables need to be adapted by the URLs to the healtchecks.io base urls.\nMy crontab looks like this (sudo crontab -l):\n@daily /home/ubuntu/scripts/wasabi.sh \u0026gt;\u0026gt; /home/ubuntu/logs/wasabi.log 2\u0026gt;\u0026amp;1 @weekly /home/ubuntu/scripts/btrfs-balance.sh \u0026gt;\u0026gt; /home/ubuntu/logs/btrfs-balance.log 2\u0026gt;\u0026amp;1 @monthly /home/ubuntu/scripts/btrfs-scrub.sh \u0026gt;\u0026gt; /home/ubuntu/logs/btrfs-scrub.log 2\u0026gt;\u0026amp;1 btrfs balance I do a weekly btrfs balance using the following script adapted from btrfsmaintenance:\n#!/bin/bash BTRFS_BALANCE_BASEURL=\u0026#34;https://hc-ping.com/XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\u0026#34; echo \u0026#34;*****************************************************\u0026#34; echo $(date) echo \u0026#34; \u0026#34; baseurl=$BTRFS_BALANCE_BASEURL url=$baseurl curl -s -m 10 --retry 5 $url/start \u0026gt; /dev/null echo \u0026#34; \u0026#34; MOUNTPOINTS=\u0026#34;/\u0026#34; DUSAGES=\u0026#34;0 5 10\u0026#34; MUSAGES=\u0026#34;0 5 10\u0026#34; for MP in $MOUNTPOINTS; do for DU in $DUSAGES; do for MU in $MUSAGES; do cmd=\u0026#34;btrfs balance start -dusage=$DU -musage=$MU $MP\u0026#34; echo $cmd $cmd if [ $? -ne 0 ]; then url=$baseurl/fail;fi done done btrfs filesystem df $MP df -H $MP echo \u0026#34; \u0026#34; done echo \u0026#34; \u0026#34; echo \u0026#34;HealthChecks.io:\u0026#34; echo $url curl -s -m 10 --retry 5 $url \u0026gt; /dev/null echo \u0026#34; \u0026#34; echo $(date) echo \u0026#34;Finished\u0026#34; echo \u0026#34;*****************************************************\u0026#34; btrfs scrub I do a monthly btrfs scrub using the following script adapted from btrfsmaintenance:\n#!/bin/bash BTRFS_SCRUB_BASEURL=\u0026#34;https://hc-ping.com/XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\u0026#34; echo \u0026#34;*****************************************************\u0026#34; echo $(date) echo \u0026#34; \u0026#34; baseurl=$BTRFS_SCRUB_BASEURL url=$baseurl curl -s -m 10 --retry 5 $url/start \u0026gt; /dev/null echo \u0026#34; \u0026#34; MOUNTPOINTS=\u0026#34;/\u0026#34; # Priority of ‚Ä¶","date":1610323200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1655466439,"objectID":"d5cf4c1109214f5ca60e98a2320110fd","permalink":"https://mutschler.dev/linux/raspi-post-install/","publishdate":"2021-01-11T00:00:00Z","relpermalink":"/linux/raspi-post-install/","section":"linux","summary":"In the following I will go through my post installation steps, i.e. which settings I choose and which apps and containers I install and use on my Raspberry Pi 4 (4 GB)","tags":["linux","raspberry pi","ubuntu","install guide","btrfs","luks","timeshift","timeshift-autosnap-apt","usb boot"],"title":"Ubuntu Server Raspberry Pi: Things to do after installation (Apps, Settings, and Tweaks)","type":"book"},{"authors":null,"categories":null,"content":"Please feel free to raise any comments or issues on the website‚Äôs Github repository. Pull requests are very much appreciated. Table of Contents Overview Tested environment Step 0 (optional): Enable USB Boot on Raspberry Pi 4 Step 1: Flash Ubuntu Server 20.10 on an external USB drive Step 2: Prepare partitions manually Step 3: Create LUKS partition and btrfs root filesystem Step 4: Boot your Raspberry Pi and SSH into it Step 5: Update your Raspberry Pi system Step 6: Create subvolumes (@ and @home) and rsync system and home files Step 7: Create a chroot environment on your Pi using the @ subvolume Step 8: Make changes to fstab, crypttab and cmdline.txt Step 9 (optional): Remote unlocking using Dropbear SSH Step 10: Some checks Step 11 (optional): Optimize btrfs mount options HDD and SSD SSD-specific Check mount options Step 12: Install Timeshift and Timeshift-autosnap-apt Timeshift Timeshift-autosnap-apt Step 13: Decide what to do with second ext4 partition Troubleshooting Overview Since 2020, I am exclusively using btrfs as filesystem on all my systems, see: Why I (still) like btrfs. So, in this guide I will show how to install Ubuntu Server 20.10 on a Raspberry Pi 4 with the following structure:\nan unencrypted boot partition to make the Pi boot completely from USB (no SD card required) a btrfs-inside-luks partition for the root filesystem (excluding /boot) containing a subvolume @ mounted as / and a subvolume @home mounted as /home headless server: remote unlocking using Dropbear (passphrase prompt via dedicated SSH login on different port) automatic system snapshots and easy rollback similar to zsys using: Timeshift which will regularly take (almost instant) snapshots of the system timeshift-autosnap-apt which will automatically run Timeshift on any apt operation and also keep a backup of your boot partition inside the snapshot With this setup you basically get the same comfort of Ubuntu‚Äôs 20.10‚Äôs ZFS and zsys initiative, but with much more flexibility and comfort due to the awesome Timeshift program, which saved my bacon quite a few times. This setup works similarly well on other distributions, for which I also have installation guides with optional RAID1.\nThis tutorial is most likely not the fastest way to achieve this, but it works for me and once everything is set up, you never have to go through it again (unless you get another Raspberry Pi of course;-) ).\nTested environment Raspberry Pi 4 4GB Ubuntu Server 20.10 Drives Samsung T5 portable SSD (1 TB) LaCie Porsche Design Mobile Drive (2TB) Step 0 (optional): Enable USB Boot on Raspberry Pi 4 Depending on when your Raspberry Pi 4 was manufactured, the bootloader EEPROM may need to be updated to enable booting from USB mass storage devices. I followed this USB mass storage boot guide to update my EEPROM, there is also an official Ubuntu (optional) USB Boot guide. Note that you need to do this only once, afterwards your Pi will always be able to boot from USB.\nStep 1: Flash Ubuntu Server 20.10 on an external USB drive In this tutorial we flash Ubuntu Server 20.10 for Raspberry Pi to an external USB 3.0 drive. To download and flash the image I first installed the Raspberry Pi Imager from the snap store (sudo snap install rpi-imager). On my Fedora machine I had to switch, temporarily, from Wayland to Gnome on Xorg to run it. Then select the following:\nCHOOSE OS -\u0026gt; Other general purpose OS -\u0026gt; Ubuntu -\u0026gt; Ubuntu Server 20.10 (RPi 3/4/400) 64-bit server OS for arm64 architectures CHOOSE SD CARD: Your external USB 3.0 drive In short, instead of selecting the SD card I am simply choosing my external USB drive instead. If you cannot do that for some reason, you can always directly flash the image to your USB drive or copy it over from a SD card.\nStep 2: Prepare partitions manually By default the partition scheme looks like this (my external USB drive is named sdb, look for system-boot and writable in the blkid output):\nsudo blkid # /dev/sdb1: LABEL_FATBOOT=\u0026#34;system-boot\u0026#34; LABEL=\u0026#34;system-boot\u0026#34; UUID=\u0026#34;2EC5-A982\u0026#34; BLOCK_SIZE=\u0026#34;512\u0026#34; TYPE=\u0026#34;vfat\u0026#34; PARTUUID=\u0026#34;254a9658-01\u0026#34; # /dev/sdb2: LABEL=\u0026#34;writable\u0026#34; UUID=\u0026#34;c21fdada-1423-4a06-be66-0b9c02860d1d\u0026#34; BLOCK_SIZE=\u0026#34;4096\u0026#34; TYPE=\u0026#34;ext4\u0026#34; PARTUUID=\u0026#34;254a9658-02\u0026#34; sudo parted /dev/sdb print # Model: LaCie P9227 Slim (scsi) # Disk /dev/sdb: 2000GB # Sector size (logical/physical): 512B/4096B # Partition Table: msdos # Disk Flags: # # Number Start End Size Type File system Flags # 1 1049kB 269MB 268MB primary fat32 boot, lba # 2 269MB 3348MB 3079MB primary ext4 If you would now boot from the drive, the second partition would expand on first boot to take over all space. One would then need to manually shrink it and move files around. To make life a bit easier, we will leave some space after the second partition and create a third partition which will actually contain our LUKS encrypted root btrfs filesystem and re-use the second partition for something else (e.g. encrypted swap or an encrypted dedicated docker image partition) later on. With btrfs ‚Ä¶","date":1610236800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1655466439,"objectID":"f19b19bc2c3e2cac2594849ec76e01f9","permalink":"https://mutschler.dev/linux/raspi-btrfs/","publishdate":"2021-01-10T00:00:00Z","relpermalink":"/linux/raspi-btrfs/","section":"linux","summary":"In this guide I will walk you through the installation procedure to get an Ubuntu 20.10 system with a luks-encrypted partition for the root filesystem (excluding /boot) formatted with btrfs that contains a subvolume @ for / and a subvolume @home for /home running on a Raspberry Pi 4. The system is installed to an external bootable USB drive so no SD card is required. I will show how to optimize the btrfs mount options and how to get a headless server, i.e. remotely unlock the luks partition using Dropbear which enables one to use SSH to decrypt the luks-encrypted partitions after a reboot. This layout enables one to use Timeshift and timeshift-autosnap-apt which will regularly take snapshots of the system and particularly on any apt operation.","tags":["linux","raspberry pi","ubuntu","install guide","btrfs","luks","timeshift","timeshift-autosnap-apt","usb boot"],"title":"Ubuntu Server 20.10 on Raspberry Pi 4: installation guide with USB Boot (no SD card) and full disk encryption (excluding /boot) using btrfs-inside-luks and auto-apt snapshots with Timeshift","type":"book"},{"authors":null,"categories":null,"content":"Please feel free to raise any comments or issues on the website‚Äôs Github repository. Pull requests are very much appreciated. Table of Contents Overview Step 0: General remarks Step 1: Graphical installer with automatic configuration and encryption Step 2: Post-Installation steps Mount the btrfs top-level root filesystem Create btrfs subvolumes @ and @home Make changes to fstab with optimized mount options Step 3: Reboot, some checks, and update system Step 4: Install Timeshift STEP 5 (OPTIONAL): Full disk encryption including /boot Backup the files in your boot partition Create luks1 partition for boot Correct fstab, crypttab and restore boot backup files Enable cryptodisk in GRUB Regenerate the initram disk and Grub Reboot and check whether this works Get rid of additional passphrase prompts [WIP] Overview Since Fedora switched their default filesystem to btrfs I decided to give it a go as I am exclusively using btrfs on all my systems, see: Why I (still) like btrfs. Fedora‚Äôs automatic installation routine with encryption is actually almost perfect for me except some changes regarding the btrfs mount options and subvolume names.\nSo, in this guide I will show how to install Fedora 33 with the following structure:\na btrfs-inside-luks partition for the root filesystem containing a subvolume @ for / and a subvolume @home for /home. Note that the Fedora installer creates subvolumes root for / and home for /home, so we need to rename these otherwise Timeshift will not work properly. an unencrypted EFI partition for the GRUB bootloader Optionally, I will also show how to encrypt the /boot partition, so you get a full-disk-encryption-system (including /boot) and only one passphrase prompt from GRUB. there is no need for a swap partition as Fedora creates a SwapOnZram during start-up automatic system snapshots and easy rollback similar to zsys using: Timeshift which will regularly take (almost instant) snapshots of the system timeshift-autosnap-dnf which will automatically run Timeshift on any dnf operation and also keep a backup of your EFI partition inside the snapshot (NOT YET) grub-btrfs which will automatically create GRUB entries for all your btrfs snapshots With this setup you basically get the same comfort of Ubuntu‚Äôs 20.04‚Äôs ZFS and zsys initiative, but with much more flexibility and comfort due to the awesome Timeshift program, which saved my bacon quite a few times. This setup works similarly well on other distributions, for which I also have installation guides with optional RAID1.\nIf you ever need to rollback your system, checkout Recovery and system rollback with Timeshift.\nStep 0: General remarks I strongly advise to try the following installation steps in a virtual machine first before doing anything like that on real hardware!\nSo, let‚Äôs spin up a virtual machine with 4 cores, 8 GB RAM, and a 64GB disk using e.g. my fork of the awesome bash script quickemu. I can confirm that the installation works equally well on my Dell XPS 13 9360 and my Dell Precision 7520.\nThis tutorial is made with Fedora 33 Workstation from https://getfedora.org/de/workstation/download/ copied to an installation media (usually a USB Flash device but may be a DVD or the ISO file attached to a virtual machine hypervisor).\nStep 1: Graphical installer with automatic configuration and encryption Boot the installation medium in UEFI mode and choose Install to Harddrive. Choose your language, Keyboard, Time \u0026amp; Date setting. Note that the Done button is (weirdly) on the top left corner. Then hit Installation Destination. Choose your harddisk and\nselect Automatic under Storage Configuration Encrypt my data under Encryption Click Done and enter your disk encryption passphrase, choose a good one. You will return to the Installation Summary screen. Click Begin Installation. When the installation process is finished, select Finish Installation. Reboot your system and go through the welcome screen.\nStep 2: Post-Installation steps Open a terminal (META + term + Enter), switch to an interactive root session and run the following commands:\nsudo -i lsblk # NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT # zram0 251:0 0 1.9G 0 disk [SWAP] # vda 252:0 0 64G 0 disk # ‚îú‚îÄvda1 252:1 0 600M 0 part /mnt/sysroot/boot/efi # ‚îú‚îÄvda2 252:2 0 1G 0 part /mnt/sysroot/boot # ‚îî‚îÄvda3 252:3 0 62.4G 0 part # ‚îî‚îÄluks-6e7e8f26-4f38-468e-aa2c-9ddaaad4aedf 253:2 0 62.4G 0 crypt /home btrfs subvolume list / # ID 256 gen 169 top level 5 path home # ID 258 gen 169 top level 5 path root # ID 265 gen 24 top level 258 path var/lib/machines ls /dev/mapper # control luks-6e7e8f26-4f38-468e-aa2c-9ddaaad4aedf blkid # /dev/vda1: UUID=\u0026#34;4FD9-A843\u0026#34; BLOCK_SIZE=\u0026#34;512\u0026#34; TYPE=\u0026#34;vfat\u0026#34; PARTLABEL=\u0026#34;EFI System Partition\u0026#34; PARTUUID=\u0026#34;9b25248e-f8fb-456d-8a9b-4b7025107794\u0026#34; # /dev/vda2: UUID=\u0026#34;7d52fc6e-8804-4a34-8d16-b185d6d62319\u0026#34; BLOCK_SIZE=\u0026#34;4096\u0026#34; TYPE=\u0026#34;ext4\u0026#34; PARTUUID=\u0026#34;f4479656-e55d-46a6-bd60-0f04f833d754\u0026#34; # /dev/vda3: UUID=\u0026#34;6e7e8f26-4f38-468e-aa2c-9ddaaad4aedf\u0026#34; TYPE=\u0026#34;crypto_LUKS\u0026#34; ‚Ä¶","date":1604448000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1655466439,"objectID":"e784ad69c45592fa659498b3a227713f","permalink":"https://mutschler.dev/linux/fedora-btrfs-33/","publishdate":"2020-11-04T00:00:00Z","relpermalink":"/linux/fedora-btrfs-33/","section":"linux","summary":"In this guide I will walk you through the installation procedure to get a Fedora workstation 33 system with a luks-encrypted partition for the root filesystem (optionally including /boot) formatted with btrfs that contains (renamed) subvolumes @ and @home for / and /home, respectively. I will show how to optimize the btrfs mount options and, in case /boot is on the encrypted partition, how to add a key-file to type the luks passphrase only once for GRUB. This layout enables one to use Timeshift which will regularly take snapshots of the system. Moreover, using grub-btrfs all snapshots can be accessed and booted into from the GRUB menu.","tags":["linux","fedora","install guide","btrfs","luks","timeshift"],"title":"Fedora Workstation 33: installation guide with btrfs-luks full disk encryption (optionally including /boot) and auto snapshots with Timeshift","type":"book"},{"authors":null,"categories":null,"content":"Please feel free to raise any comments or issues on the website‚Äôs Github repository. Pull requests are very much appreciated. Table of Contents Some caveats [THIS PART IS ONLY NOTES AND THIS NEEDS TO UPDATE THIS PART] Linux is about choice, so since a couple of months I started using btrfs as my filesystem of choice on all my computers and servers. Granted, for most desktop users the default ext4 file system will work just fine; however, for those of us who like to tinker with their system an advanced file system like ZFS or btrfs offers much more functionality. Particularly, the possibility of taking snapshots within seconds (due to copy-on-write) and easy ways to rollback your system in case anything breaks are just awesome selling points for me as an advanced desktop user (and occasional distro hopper). Even though, for an enterprise environment, there is some heated debate why ZFS is allegedly better than btrfs, but for me as a desktop user both filesystems offer basically the same functionality and reliability, that is:\nautomatic defragmentation builtin raid features compression data checksums extreme flexibility snapshots Ubuntu 20.04 Focal Fossa has given us an experimental installation option which creates ZFS pools and dataset compatible with zsys, which is a utility that creates automatic snapshots and adds corresponding GRUB menu entries before any APT operation. However, a full disk encryption is missing from the installer, any manual partitioning needs are not yet possible, and most live systems won‚Äôt be able to open your root pool as the ZFS modules are not loaded by default in the kernel.1\nUbuntu will keep pushing ZFS and this is a good thing, again Linux is about choice. But until then I will stick with btrfs, because - simply put - I understand it better than ZFS, find it much simpler to use, and it is built into the kernel. btrfs commands are very easy, snapshots look like directories, I can create them, delete them, move them around, boot into, replace stuff just like with normal files and folders. Compression works fast, send-receive backups to other drives works incrementally, etc. Also there is a greater availability of open-source CLI and GUI programs for btrfs than for ZFS (on desktop (!) Linux) like Snapper, btrbk, buttermanager or btrfsmaintenance.\nThe biggest asset for me, however, is that I love and support Timeshift, as it saved my bacon several times, and Timeshift supports btrfs and not ZFS! Also, there are several extensions, on which I contributed, that make working with Timeshift and btrfs very user-friendly and comfortable. For instance, I am a developer of timeshift-autosnap for ARCH systems and timeshift-autosnap-apt for Debian/Ubuntu based systems. These scripts create automatic snapshots with Timeshift during any APT operation. Combined with grub-btrfs, which creates GRUB menu entries for all snapshots, this is the perfect setup for my I love playing with things use case and replaces any need for zsys right now. Of course, I will continue to study and try out ZFS and maybe switch over in due course.\nEven though I am quite fond with btrfs for now, there are still some caveats that theoretically might be problematic, and I‚Äôd like to mention them for completeness sake:\nbtrfs is difficult to deal with when it runs out of space (you have to do a manual rebalance) timeshift-autosnap-apt does not have error handling and can freeze updates swapfiles need special consideration advanced features like RAID need careful consideration. I do have very good experience with btrfs in a RAID 1 setting both on my Dell precision 7520 workstation and my KVM server. The installers of Ubuntu, Linux Mint, Pop!_OS or ElementaryOS need manual adustment of configuration files and mount options are usually not set optimally for using btrfs on SSD or NVMe. So I have written several installation guides and made some YouTube videos on my installation steps to install Pop!_OS, Ubuntu or Manjaro with btrfs inside an encrypted luks partition and automatic system snapshots with Timeshift.\nSome caveats [THIS PART IS ONLY NOTES AND THIS NEEDS TO UPDATE THIS PART] btrfs will refuse to mount multi-device systems in degraded state, which is if one or more devices are missing, without special mount option degraded. Even so, a btrfs filesystem should not be manipulated by changing geometry (switching to or from RAID levels, adding or removing disks) when mounted, especially not root, as that will most certainly result with inconsistent filesystem and in some cases inability to boot at all.\nI would actually advise to create a RAID1 between 3 devices, if you can. Also in any case, if a disk breaks, boot into a live system and try to replace the disk or make the working disk single again with the balance command\nGranted there are always ways as you can of course adapt /usr/share/ubiquity/zsys-setup for your manual partition needs or enable native encryption. Also the Ubuntu live image has the relevant ZFS kernel ‚Ä¶","date":1597795200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1655466439,"objectID":"cffecbb9574271c56ab80849f311313f","permalink":"https://mutschler.dev/linux/btrfs/","publishdate":"2020-08-19T00:00:00Z","relpermalink":"/linux/btrfs/","section":"linux","summary":"My personal experiences and notes on the btrfs filesystem.","tags":["btrfs","linux"],"title":"Why I (still) like btrfs","type":"book"},{"authors":null,"categories":null,"content":"Please feel free to raise any comments or issues on the website‚Äôs Github repository. Pull requests are very much appreciated. Table of Contents Overview Step 0: General remarks Step 1: Boot the install, check UEFI mode and open an interactive root shell Step 2: Prepare partitions manually Create partition table and layout Create luks1 partition and btrfs root filesystem Step 3 (optional): Optimize mount options for SSD or NVME drives Step 4: Install Ubuntu using the Ubiquity installer without the bootloader Step 5: Post-Installation steps Create a chroot environment and enter your system Create RAID 1 for root filesystem using btrfs balance Create crypttab Encrypted swap Add a key-file to type luks passphrase only once (optional, but recommended) Install the EFI bootloader Step 6: Reboot, some checks, and update system Step 7: Duplicate EFI partition to the second disk Step 8: Install Timeshift, timeshift-autosnap-apt and grub-btrfs Step 10 (WIP): Keep efi partitions in sync Emergency scenario: RAID1 is broken Overview Since a couple of months, I am exclusively using btrfs as my filesystem on all my systems, see: Why I (still) like btrfs. So, in this guide I will show how to install Ubuntu 20.04 with the following structure:\na btrfs-inside-luks partition for the root filesystem (including /boot) on two hard disks in a RAID1 managed by btrfs. the root filesystem contains a subvolume @ for / and a subvolume @home for /home with only one passphrase prompt from GRUB an encrypted swap partition on each disk an unencrypted EFI partition for the GRUB bootloader duplicated on both disks automatic system snapshots and easy rollback similar to zsys using: Timeshift which will regularly take (almost instant) snapshots of the system timeshift-autosnap-apt which will automatically run Timeshift on any apt operation and also keep a backup of your EFI partition inside the snapshot grub-btrfs which will automatically create GRUB entries for all your btrfs snapshots If you don‚Äôt need RAID1, follow this guide: Ubuntu 20.04 btrfs-luks With this setup you basically get the same comfort of Ubuntu‚Äôs 20.04‚Äôs ZFS and zsys initiative, but with much more flexibility and comfort due to the awesome Timeshift program, which saved my bacon quite a few times. This setup works similarly well on other distributions, for which I also have installation guides with optional RAID1.\nIf you ever need to rollback your system, checkout Recovery and system rollback with Timeshift. In the video, I also show what to do if your RAID1 is broken.\nStep 0: General remarks I strongly advise to try the following installation steps in a virtual machine first before doing anything like that on real hardware!\nSo, let‚Äôs spin up a virtual machine with 4 cores, 8 GB RAM, and two 64GB disk using e.g. my fork of the awesome bash script quickemu to automatically create 2 disks. I can confirm that the installation works equally well on my Dell Precision 7520 (RAID1 between a SSD and NVME) and on my KVM server (RAID1 between two HDD).\nThis tutorial is made with Ubuntu 20.04 Focal Fossa copied to an installation media (usually a USB Flash device but may be a DVD or the ISO file attached to a virtual machine hypervisor). Other versions of Ubuntu or distributions that use the Ubiquity installer (like Linux Mint) also work, see my other installation guides.\nStep 1: Boot the install, check UEFI mode and open an interactive root shell Since most modern PCs have UEFI, I will cover only the UEFI installation (see the References on how to deal with Legacy installs). So, boot the installation medium in UEFI mode, choose your language and click Try Ubuntu. Once the Live Desktop environment has started we need to use a Terminal shell command-line to issue a series of commands to prepare the target device before executing the installer itself. As I have a German Keyboard, I first go to Settings -- Region \u0026amp; Language and set my keyboard layout.\nThen, open a terminal (CTRL+ALT+T) and run the following command:\nmount | grep efivars # efivarfs on /sys/firmware/efi/efivars type efivarfs (rw,nosuid,nodev,noexec,relatime) to detect whether we are in UEFI mode. Now switch to an interactive root session:\nsudo -i You might find maximizing the terminal window is helpful for working with the command-line. Do not close this terminal window during the whole installation process until we are finished with everything.\nStep 2: Prepare partitions manually Create partition table and layout First find out the name of your drive. For me the installation target device is called vda and I will use vdb for the RAID1 managed by btrfs:\nlsblk # NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT # loop0 7:0 0 1.9G 1 loop /rofs # loop1 7:1 0 27.1M 1 loop /snap/snapd/7264 # loop2 7:2 0 55M 1 loop /snap/core18/1705 # loop3 7:3 0 240.8M 1 loop /snap/gnome-3-34-1804/24 # loop4 7:4 0 62.1M 1 loop /snap/gtk-common-themes/1506 # loop5 7:5 0 49.8M 1 loop /snap/snap-store/433 # sr0 11:0 1 2.5G 0 rom /cdrom # sr1 11:1 1 1024M 0 ‚Ä¶","date":1590019200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1655466439,"objectID":"c3602641b9c825711ec88c6e3c5da93a","permalink":"https://mutschler.dev/linux/ubuntu-btrfs-raid1-20-04/","publishdate":"2020-05-21T00:00:00Z","relpermalink":"/linux/ubuntu-btrfs-raid1-20-04/","section":"linux","summary":"In this guide I will walk you through the installation procedure to get an Ubuntu 20.04 system with a luks-encrypted partition for the root filesystem (including /boot) formatted with btrfs that contains a subvolume @ for / and a subvolume @home for /home. The system is set up in a RAID1 managed by the btrfs filesystem. I will show how to optimize the btrfs mount options and how to add key-files to type the luks passphrase only once for each disk for GRUB. I will also cover how to setup encrypted swap partitions. This layout enables one to use Timeshift and timeshift-autosnap-apt which will regularly take snapshots of the system and particularly on any apt operation. Moreover, using grub-btrfs all snapshots can be accessed and booted into from the GRUB menu. Due to the RAID1 managed by btrfs you get redundancy of your data.","tags":["linux","ubuntu","install guide","btrfs","luks","timeshift","timeshift-autosnap-apt","raid"],"title":"Ubuntu Desktop 20.04: installation guide with btrfs-luks-RAID1 full disk encryption including /boot and auto-apt snapshots with Timeshift","type":"book"},{"authors":null,"categories":null,"content":"Please feel free to raise any comments or issues on the website‚Äôs Github repository. Pull requests are very much appreciated. Note that this written guide is an updated version of the video and contains much more information. Table of Contents Overview Step 0: General remarks Step 1: Boot the install, check UEFI mode and open an interactive root shell Step 2: Prepare partitions manually Create partition table and layout Create luks1 partition Create filesystems for root and EFI System partitions Step 3 (optional): Optimize mount options for SSD or NVME drives Step 4: Install Ubuntu using the Ubiquity installer without the bootloader Step 5: Post-Installation steps Create a chroot environment and enter your system Create crypttab Encrypted swap Add a key-file to type luks passphrase only once (optional, but recommended) Install the EFI bootloader Step 6: Reboot, some checks, and update system Step 7: Install Timeshift, timeshift-autosnap-apt and grub-btrfs Overview Since a couple of months, I am exclusively using btrfs as my filesystem on all my systems, see: Why I (still) like btrfs. So, in this guide I will show how to install Ubuntu 20.04 with the following structure:\na btrfs-inside-luks partition for the root filesystem (including /boot) containing a subvolume @ for / and a subvolume @home for /home with only one passphrase prompt from GRUB either an encrypted swap partition or a swapfile (I will show both) an unencrypted EFI partition for the GRUB bootloader automatic system snapshots and easy rollback similar to zsys using: Timeshift which will regularly take (almost instant) snapshots of the system timeshift-autosnap-apt which will automatically run Timeshift on any apt operation and also keep a backup of your EFI partition inside the snapshot grub-btrfs which will automatically create GRUB entries for all your btrfs snapshots If you need RAID1, follow this guide: Ubuntu 20.04 btrfs-luks-raid1 With this setup you basically get the same comfort of Ubuntu‚Äôs 20.04‚Äôs ZFS and zsys initiative, but with much more flexibility and comfort due to the awesome Timeshift program, which saved my bacon quite a few times. This setup works similarly well on other distributions, for which I also have installation guides with optional RAID1.\nIf you ever need to rollback your system, checkout Recovery and system rollback with Timeshift.\nStep 0: General remarks I strongly advise to try the following installation steps in a virtual machine first before doing anything like that on real hardware!\nSo, let‚Äôs spin up a virtual machine with 4 cores, 8 GB RAM, and a 64GB disk using e.g. my fork of the awesome bash script quickemu. I can confirm that the installation works equally well on my Dell XPS 13 9360, my Dell Precision 7520 and on my KVM server.\nThis tutorial is made with Ubuntu 20.04 Focal Fossa copied to an installation media (usually a USB Flash device but may be a DVD or the ISO file attached to a virtual machine hypervisor). Other versions of Ubuntu or distributions that use the Ubiquity installer (like Linux Mint) also work, see my other installation guides.\nStep 1: Boot the install, check UEFI mode and open an interactive root shell Since most modern PCs have UEFI, I will cover only the UEFI installation (see the References on how to deal with Legacy installs). So, boot the installation medium in UEFI mode, choose your language and click Try Ubuntu. Once the Live Desktop environment has started we need to use a Terminal shell command-line to issue a series of commands to prepare the target device before executing the installer itself. As I have a German Keyboard, I first go to Settings -- Region \u0026amp; Language and set my keyboard layout.\nThen, open a terminal (CTRL+ALT+T) and run the following command:\nmount | grep efivars # efivarfs on /sys/firmware/efi/efivars type efivarfs (rw,nosuid,nodev,noexec,relatime) to detect whether we are in UEFI mode. Now switch to an interactive root session:\nsudo -i You might find maximizing the terminal window is helpful for working with the command-line. Do not close this terminal window during the whole installation process until we are finished with everything.\nStep 2: Prepare partitions manually Create partition table and layout First find out the name of your drive. For me the installation target device is called vda:\nlsblk # NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT # loop0 7:0 0 1.9G 1 loop /rofs # loop1 7:1 0 27.1M 1 loop /snap/snapd/7264 # loop2 7:2 0 55M 1 loop /snap/core18/1705 # loop3 7:3 0 240.8M 1 loop /snap/gnome-3-34-1804/24 # loop4 7:4 0 62.1M 1 loop /snap/gtk-common-themes/1506 # loop5 7:5 0 49.8M 1 loop /snap/snap-store/433 # sr0 11:0 1 2.5G 0 rom /cdrom # sr1 11:1 1 1024M 0 rom # sr2 11:2 1 1024M 0 rom # vda 252:0 0 64G 0 disk You can also open gparted or have a look into the /dev folder to make sure what your hard drive is called. In most cases they are called sda for normal SSD and HDD, whereas for NVME storage the naming is nvme0. Also note that there are no ‚Ä¶","date":1588896000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1660500681,"objectID":"ac7606b7554b0fe115ccbb03da1d605e","permalink":"https://mutschler.dev/linux/ubuntu-btrfs-20-04/","publishdate":"2020-05-08T00:00:00Z","relpermalink":"/linux/ubuntu-btrfs-20-04/","section":"linux","summary":"In this guide I will walk you through the installation procedure to get an Ubuntu 20.04 system with a luks-encrypted partition for the root filesystem (including /boot) formatted with btrfs that contains a subvolume @ for / and a subvolume @home for /home. I will show how to optimize the btrfs mount options and how to add a key-file to type the luks passphrase only once for GRUB. I will also cover how to setup an encrypted swap partition or swapfile. This layout enables one to use Timeshift and timeshift-autosnap-apt which will regularly take snapshots of the system and particularly on any apt operation. Moreover, using grub-btrfs all snapshots can be accessed and booted into from the GRUB menu.","tags":["linux","ubuntu","install guide","btrfs","luks","timeshift","timeshift-autosnap-apt"],"title":"Ubuntu Desktop 20.04: installation guide with btrfs-luks full disk encryption including /boot and auto-apt snapshots with Timeshift","type":"book"},{"authors":null,"categories":null,"content":"Please feel free to raise any comments or issues on the website‚Äôs Github repository. Pull requests are very much appreciated. In the following I will go through my post installation steps, i.e. which settings I choose and which apps I install and use. Table of Contents Basic Steps Security steps with Yubikey Apps Flatpak support System utilities Networking Coding Text-processing Communication Multimedia Misc tweaks and settings Basic Steps Go through welcome screen This is self-explanatory. Usually I already set up Online Accounts for Nextcloud.\nGet rid of unnecessary languages Open ‚Äúlanguage‚Äù in ‚Äúregion settings‚Äù, do not update these, but first remove the unnecessary ones. Then reopen ‚Äúlanguages‚Äù and update these.\nInstall updates and reboot sudo apt update sudo apt upgrade sudo apt dist-upgrade sudo apt autoremove sudo apt autoclean sudo fwupdmgr get-devices sudo fwupdmgr get-updates sudo fwupdmgr update sudo reboot now Get Thunderbolt Dock to work and adjust monitors I use a Thunderbolt Dock (DELL TB16) with three monitors, which is great but also a bit tricky to set up (see Dell TB16 Archwiki). I noticed that sometimes I just need to plug the USB-C cable in and out a couple of times to make it work (there seems to be a loose contact). Anyways, for me the most important step is to check in ‚ÄúSettings-Privacy-Thunderbolt‚Äù, whether the Thunderbolt dock works, so I can rearrange my three monitors in ‚Äúmonitor settings‚Äù. I then save this as default for ‚Äúgdm‚Äù:\nsudo cp ~/.config/monitors.xml ~gdm/.config/ Restore from Backup I mount my luks encrypted backup storage drive using nautilus and use rsync to copy over my files and important configuration scripts:\nexport BACKUP=/media/$USER/UUIDOFBACKUPDRIVE/@home/$USER/ sudo rsync -avuP $BACKUP/Bilder ~/ sudo rsync -avuP $BACKUP/Dokumente ~/ sudo rsync -avuP $BACKUP/Downloads ~/ sudo rsync -avuP $BACKUP/dynare ~/ sudo rsync -avuP $BACKUP/Images ~/ sudo rsync -avuP $BACKUP/Musik ~/ sudo rsync -avuP $BACKUP/Schreibtisch ~/ sudo rsync -avuP $BACKUP/SofortUpload ~/ sudo rsync -avuP $BACKUP/Videos ~/ sudo rsync -avuP $BACKUP/Vorlagen ~/ sudo rsync -avuP $BACKUP/Work ~/ sudo rsync -avuP $BACKUP/.config/Nextcloud ~/.config/ sudo rsync -avuP $BACKUP/.gitkraken ~/ sudo rsync -avuP $BACKUP/.gnupg ~/ sudo rsync -avuP $BACKUP/.local/share/applications ~/.local/share/ sudo rsync -avuP $BACKUP/.matlab ~/ sudo rsync -avuP $BACKUP/.ssh ~/ sudo rsync -avuP $BACKUP/wiwi ~/ sudo rsync -avuP $BACKUP/.dynare ~/ sudo rsync -avuP $BACKUP/.gitconfig ~/ sudo chown -R $USER:$USER /home/$USER Sync Firefox to access password manager I use Firefox and like to keep my bookmarks and extensions in sync. Particularly, I use Bitwarden for all my passwords.\nSSH keys If I want to create a new SSH key, I run:\nssh-keygen -t rsa -b 4096 -C \u0026#34;willi@mutschler\u0026#34; Otherwise, I restore my .ssh folder from my backup. Either way, afterwards, one needs to add the file containing your key, usually id_rsa, to the ssh-agent:\neval \u0026#34;$(ssh-agent -s)\u0026#34; #works in bash eval (ssh-agent -c) #works in fish ssh-add ~/.ssh/id_rsa Don‚Äôt forget to add your public keys to GitHub, Gitlab, Servers, etc.\nFilesystem optimizations: fstrim timer and tlp Btrfs Async Discard Support Looks To Be Ready For Linux 5.6; however, I am mostly on the 5.4 kernel, so I make sure that discard is not set in either my fstab or crypttab files, and also enable the fstrim.timer systemd service:\nsudo sed -i \u0026#34;s|,discard||\u0026#34; /etc/fstab cat /etc/fstab #should be no discard sudo sed -i \u0026#34;s|,discard||\u0026#34; /etc/crypttab cat /etc/crypttab #should be no discard sudo systemctl enable fstrim.timer Also, there is some debate whether tlp on btrfs is a good choice or should be deactivated. In any case, my laptops have sufficient battery power, so I remove it:\nsudo apt remove --purge tlp Security steps with Yubikey I have two Yubikeys and use them\nas second-factor for all admin/sudo tasks for my private GPG key For this I need to install several packages:\nsudo apt install -y yubikey-manager yubikey-personalization # some common packages # Insert the yubikey ykman info # your key should be recognized # Device type: YubiKey 5 NFC # Serial number: # Firmware version: 5.1.2 # Form factor: Keychain (USB-A) # Enabled USB interfaces: OTP+FIDO+CCID # NFC interface is enabled. # # Applications\tUSB NFC # OTP Enabled\tEnabled # FIDO U2F\tEnabled\tEnabled # OpenPGP Enabled\tEnabled # PIV Enabled\tDisabled\t# OATH Enabled\tEnabled # FIDO2 Enabled\tEnabled sudo apt install -y libpam-u2f # second-factor for sudo commands sudo apt install -y gpg scdaemon gnupg-agent pcscd gnupg2 # stuff for GPG Make sure that OpenPGP and PIV are enabled on both Yubikeys as shown above.\nYubikey: two-factor authentication for admin/sudo password Let‚Äôs set up the Yubikeys as second-factor for everything related to sudo using the common-auth pam.d module:\npamu2fcfg \u0026gt; ~/u2f_keys # When your device begins flashing, touch the metal contact to confirm the association. pamu2fcfg -n \u0026gt;\u0026gt; ~/u2f_keys # Do the same with your backup ‚Ä¶","date":1587686400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1655466439,"objectID":"dc664e619aa82875e10b99b590e77a56","permalink":"https://mutschler.dev/linux/ubuntu-post-install/","publishdate":"2020-04-24T00:00:00Z","relpermalink":"/linux/ubuntu-post-install/","section":"linux","summary":"In the following I will go through my post installation steps on Ubuntu, i.e. which settings I choose and which apps I install and use.","tags":["linux","ubuntu","install guide","btrfs","luks","timeshift","timeshift-autosnap-apt"],"title":"Ubuntu Desktop: Things to do after installation (Apps, Settings, and Tweaks)","type":"book"},{"authors":null,"categories":null,"content":"Please feel free to raise any comments or issues on the website‚Äôs Github repository. Pull requests are very much appreciated. Note that this written guide is an updated version of the video and contains much more information. Table of Contents Overview Step 0: General remarks Step 1: Boot the install, check UEFI mode and open an interactive root shell Step 2: Prepare partitions manually Create partition table and layout Create luks2 partitions, LVM and btrfs root filesystems Step 3: Install POP!_OS using the graphical installer Step 4: Post-Installation steps Mount the btrfs top-level root filesystem Create RAID 1 for root filesystem using btrfs balance Create btrfs subvolumes @ and @home Create a chroot environment and enter your system Adjust configuration of crypttab, systemd bootloader and kernelstub Step 5: Reboot, some checks, and update system Step 6: Create degraded boot entry Step 7: Make duplicate of recovery partition and create separate boot entries Step 8: Make duplicate of EFI Step 9: Install Timeshift and timeshift-autosnap-apt Step 10 (WIP): Keep efi partitions in sync Emergency scenario: RAID1 is broken [WIP] efi is broken vda is broken vdb is broken Overview Since a couple of months, I am exclusively using btrfs as my filesystem on all my systems, see Why I (still) like btrfs. So, in this guide I will show how to install Pop!_OS 20.04 with the following structure:\na btrfs-LVM-inside-luks partition for the root filesystem on two hard disks in a RAID1 managed by btrfs the btrfs logical volume contains a subvolume @ for / and a subvolume @home for /home. Note that the Pop!_OS installer does not create any subvolumes on btrfs, so we need to do this manually. an encrypted swap partition an unencrypted EFI partition for the systemd bootloader duplicated on both disks an unencrypted partition for the Pop!_OS recovery system duplicated on both disks automatic system snapshots and easy rollback similar to zsys using: Timeshift which will regularly take (almost instant) snapshots of the system timeshift-autosnap-apt which will automatically run Timeshift on any APT operation and also keep a backup of your EFI partition inside the snapshot If you don‚Äôt need RAID1, follow this guide: Pop!_OS 20.04 btrfs-luks With this setup you basically get the same comfort of Ubuntu‚Äôs 20.04‚Äôs ZFS and zsys initiative, but with much more flexibility and comfort due to the awesome Timeshift program, which saved my bacon quite a few times. This setup works similarly well on other distributions, for which I also have installation guides with optional RAID1.\nIf you ever need to rollback your system, checkout Recovery and system rollback with Timeshift. In the video, I also show what to do if your RAID1 is broken.\nStep 0: General remarks I strongly advise to try the following installation steps in a virtual machine first before doing anything like that on real hardware!\nSo, let‚Äôs spin up a virtual machine with 4 cores, 8 GB RAM, and two 64GB disk using e.g. my fork of the awesome bash script quickemu to automatically create 2 disks. I can confirm that the installation works equally well on my Dell Precision 7520 (RAID1 between a SSD and NVME).\nThis tutorial is made with Pop!_OS 20.04 from https://system76.com/pop copied to an installation media (usually a USB Flash device but may be a DVD or the ISO file attached to a virtual machine hypervisor). Other versions of Pop!_OS and other distributions that use Systemd boot manager should also work, see my other installation guides.\nStep 1: Boot the install, check UEFI mode and open an interactive root shell Since most modern PCs have UEFI, I will cover only the UEFI installation (see the References on how to deal with Legacy installs). So, boot the installation medium in UEFI mode and choose Try or install Pop!_OS. Once the Live Desktop environment has started choose your language, region, and keyboard layout, then hit Try Demo Mode. Open a terminal (META + T) and run the following command:\nmount | grep efivars # efivarfs on /sys/firmware/efi/efivars type efivarfs (rw,nosuid,nodev,noexec,relatime) to detect whether you are in UEFI mode. Now switch to an interactive root session:\nsudo -i You might find maximizing the terminal window is helpful for working with the command-line. Do not close this terminal window during the whole installation process until we are finished with everything.\nStep 2: Prepare partitions manually Create partition table and layout First find out the name of your drive. For me the installation target device is called vda and I will use vdb for the RAID1 managed by btrfs:\nlsblk # NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT # loop0 7:0 0 2G 1 loop /rofs # sr0 11:0 1 2.1G 0 rom /cdrom # sr1 11:1 1 1024M 0 rom # sr2 11:2 1 1024M 0 rom # vda 252:0 0 64G 0 disk # vdb 252:16 0 64G 0 disk You can also open gparted or have a look into the /dev folder to make sure what your hard drives are called. In most cases they are called sda and sdb for normal SSD and HDD, whereas ‚Ä¶","date":1587427200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1660500681,"objectID":"3cae6052902c1871f0f16cd8cfd091ed","permalink":"https://mutschler.dev/linux/pop-os-btrfs-raid1-20-04/","publishdate":"2020-04-21T00:00:00Z","relpermalink":"/linux/pop-os-btrfs-raid1-20-04/","section":"linux","summary":"In this guide I will walk you through the installation procedure to get a Pop!_OS 20.04 system with a luks-encrypted partition which contains a LVM with a logical volume for the root filesystem that is formatted with btrfs and contains a subvolume @ for / and a subvolume @home for /home. The system is set up in a RAID1 managed by the btrfs filesystem. I will show how to optimize the btrfs mount options and how to setup encrypted swap partitions which work with hibernation. This layout enables one to use Timeshift and timeshift-autosnap-apt which will regularly take snapshots of the system and particularly on any apt operation. The recovery system of Pop!_OS is also installed to both disks and accessible via the systemd bootloaders. Due to the RAID1 managed by btrfs you get redundancy of your data.","tags":["linux","pop-os","install guide","btrfs","luks","timeshift","timeshift-autosnap-apt"],"title":"Pop!_OS 20.04: installation guide with btrfs-LVM-luks-RAID1 and auto-apt snapshots with Timeshift","type":"book"},{"authors":null,"categories":null,"content":"Please feel free to raise any comments or issues on the website‚Äôs Github repository. Pull requests are very much appreciated. Note that this written guide is an updated version of the video and contains much more information. Table of Contents Overview Step 0: General remarks Step 1: Boot the install, check UEFI mode and open an interactive root shell Step 2: Prepare partitions manually Create partition table and layout Create luks2 partition, LVM and btrfs root filesystem Step 3: Install Pop!_OS using the graphical installer Step 4: Post-Installation steps Mount the btrfs top-level root filesystem Create btrfs subvolumes @, @home and @swap Create a btrfs swapfile Adjust configuration of systemd bootloader and kernelstub Create a chroot environment, install btrfs-progs and update initramfs Step 5: Reboot, some checks, and update system Step 6: Install Timeshift and timeshift-autosnap-apt Overview Since a couple of months, I am exclusively using btrfs as my filesystem on all my systems, see Why I (still) like btrfs. So, in this guide I will show how to install Pop!_OS 20.04 with the following structure:\na btrfs-LVM-inside-luks partition for the root filesystem the btrfs logical volume contains a subvolume @ for /, a subvolume @home for /home, and another subvolume @swap for the swapfile. Note that the Pop!_OS installer does not create any subvolumes on btrfs, so we need to do this manually. an unencrypted EFI partition for the systemd bootloader an unencrypted partition for the Pop!_OS recovery system automatic system snapshots and easy rollback similar to zsys using: Timeshift which will regularly take (almost instant) snapshots of the system timeshift-autosnap-apt which will automatically run Timeshift on any apt operation and also keep a backup of your EFI partition inside the snapshot If you need RAID1, follow this guide: Pop!_OS 20.04 btrfs-luks-raid1 With this setup you basically get the same comfort of Ubuntu‚Äôs 20.04‚Äôs ZFS and zsys initiative, but with much more flexibility and comfort due to the awesome Timeshift program, which saved my bacon quite a few times. This setup works similarly well on other distributions, for which I also have installation guides with optional RAID1.\nIf you ever need to rollback your system, checkout Recovery and system rollback with Timeshift.\nStep 0: General remarks I strongly advise to try the following installation steps in a virtual machine first before doing anything like that on real hardware!\nSo, let‚Äôs spin up a virtual machine with 4 cores, 8 GB RAM, and a 64GB disk using e.g. my fork of the awesome bash script quickemu. I can confirm that the installation works equally well on my Dell XPS 13 9360 and my Dell Precision 7520.\nThis tutorial is made with Pop!_OS 20.04 from https://system76.com/pop copied to an installation media (usually a USB Flash device but may be a DVD or the ISO file attached to a virtual machine hypervisor). Other versions of Pop!_OS and other distributions that use Systemd boot manager should also work, see my other installation guides.\nStep 1: Boot the install, check UEFI mode and open an interactive root shell Since most modern PCs have UEFI, I will cover only the UEFI installation (see the References on how to deal with Legacy installs). So, boot the installation medium in UEFI mode and choose Try or install Pop!_OS. Once the Live Desktop environment has started choose your language, region, and keyboard layout, then hit Try Demo Mode. Open a terminal (META + T) and run the following command:\nmount | grep efivars # efivarfs on /sys/firmware/efi/efivars type efivarfs (rw,nosuid,nodev,noexec,relatime) to detect whether you are in UEFI mode. Now switch to an interactive root session:\nsudo -i You might find maximizing the terminal window is helpful for working with the command-line. Do not close this terminal window during the whole installation process until we are finished with everything.\nStep 2: Prepare partitions manually Create partition table and layout First find out the name of your drive. For me the installation target device is called vda:\nlsblk # NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT # loop0 7:0 0 2G 1 loop /rofs # sr0 11:0 1 2.1G 0 rom /cdrom # sr1 11:1 1 1024M 0 rom # sr2 11:2 1 1024M 0 rom # vda 252:0 0 64G 0 disk You can also open gparted or have a look into the /dev folder to make sure what your hard drives are called. In most cases they are called sda for normal SSD and HDD, whereas for NVME storage the naming is nvme0. Also note that there are no partitions or data on my hard drive, you should always double check which partition layout fits your use case, particularly if you dual-boot with other systems.\nWe‚Äôll now create a disk table and add three partitions on vda:\na 512 MiB FAT32 EFI partition for the systemd bootloader a 4 GiB FAT32 partition for the Pop!_OS recovery system a luks2 encrypted partition which contains a LVM with one logical volume formatted with btrfs, which will be our root filesystem Some remarks:\nThe ‚Ä¶","date":1587340800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1660500681,"objectID":"97a2c2bce41454650d5ff8f15e93203a","permalink":"https://mutschler.dev/linux/pop-os-btrfs-20-04/","publishdate":"2020-04-20T00:00:00Z","relpermalink":"/linux/pop-os-btrfs-20-04/","section":"linux","summary":"In this guide I will walk you through the installation procedure to get a Pop!_OS 20.04 system with a luks-encrypted partition which contains a LVM with a logical volume for the root filesystem that is formatted with btrfs and contains a subvolume @ for / and a subvolume @home for /home. I will show how to optimize the btrfs mount options and how to setup an encrypted swapfile. This layout enables one to use Timeshift and timeshift-autosnap-apt which will regularly take snapshots of the system and particularly on any apt operation. The recovery system of Pop!_OS is also installed to the disk and accessible via the systemd bootloader.","tags":["linux","pop-os","install guide","btrfs","luks","timeshift","timeshift-autosnap-apt"],"title":"Pop!_OS 20.04: installation guide with btrfs-LVM-luks and auto-apt snapshots with Timeshift","type":"book"},{"authors":null,"categories":null,"content":"[Work-In-Progress] Please feel free to raise any comments or issues on the website‚Äôs Github repository. Pull requests are very much appreciated. Table of Contents If you can access your desktop environment (either directly or via an old snapshot) If you can‚Äôt boot into your desktop environment Manually or if the above fails Last resort: chroot method Emergency scenario: RAID1 is broken (in-progress to generalize this) vda is broken vdb is broken If you can access your desktop environment (either directly or via an old snapshot) Launch Timeshift from the menu (or desktop shortcut) and select a snapshot and hit restore. A reboot and you‚Äôre done. Takes mere seconds and doesn‚Äôt get any easier.\nIf you can‚Äôt boot into your desktop environment Run a live system, decrypt all partitions and install Timeshift.\nsudo cryptsetup luksOpen /dev/vda3 cryptdata sudo apt install timeshift Run timeshift either in GUI or CLI mode, set the options and restore your system.\nManually or if the above fails Run a live system (e.g. Ubuntu install medium), decrypt all partitions and install timeshift.\nsudo cryptsetup luksOpen /dev/vda3 cryptdata sudo apt install timeshift Mount the top level root filesystem to /mnt:\nsudo mount -o subvolid=@ /dev/mapper/cryptdata /mnt Now move or rename the bad @ snapshot.\nsudo mv /mnt/@ /mnt/@.bad and move a good one to be your new @:\nsudo mv /mnt/timeshift-btrfs/snapshots/2020-05-06_23-35-24/@ /mnt/@ In some cases (if you want to revert failed kernel updates or failed changes to initramfs), you should also restore your EFI partition. That is, mount your efi partition into the the new @ and restore the efi backup:\nsudo mount /dev/vda1 /mnt/@/boot/efi sudo rsync -avuP --delete /mnt/@/boot.backup/efi/ /mnt/@/boot/efi/ Reboot. If something went wrong, but you are sure that your snapshot is actually fine, then you need to chroot into your system as described in the next section.\nLast resort: chroot method If you need to access your system via a chroot environment, then run a live system (e.g. Ubuntu install medium), decrypt all partitions and mount @:\nsudo cryptsetup luksOpen /dev/vda3 cryptdata mount -o subvol=@,ssd,noatime,space_cache,commit=120,compress=zstd /dev/mapper/cryptdata /mnt for n in proc sys dev etc/resolv.conf; do mount --rbind /$n /mnt/$n; done chroot /mnt mount -av # in case you need the other subvolumes and partitions # DO SOME ROOT STUFF Typically, these commands should restore a working snapshot:\napt install -y --reinstall grub-efi-amd64-signed linux-generic linux-headers-generic update-initramfs -c -k all grub-install /dev/vda update-grub Reboot!\nEmergency scenario: RAID1 is broken (in-progress to generalize this) vda is broken Let‚Äôs assume vda is broken (to this end I shutdown the virtual machine and added an empty vda). Now we need to open the EFI BOOT MANAGER IN BIOS and select to boot from the EFI partition on vdb. The system will not boot, but we have our recovery system on vdb, so let‚Äôs boot into it. Then, we need to chroot in degraded mode into the system, change PARTUUID in the fstab, and remove the bad drive from the crypttab:\nsudo -i cryptsetup luksOpen /dev/vdb4 crypt_vdb mount -o subvol=@,degraded /dev/mapper/data_vdb-root /mnt mount /dev/vdb1 /mnt/boot/efi for n in proc sys dev etc/resolv.conf; do mount --rbind /$n /mnt/$n; done chroot /mnt # get PARTUUID echo $(blkid -s PARTUUID -o value /dev/vdb1) # df1701f7-6e8b-4db1-8192-3a7931e3a905 echo $(blkid -s PARTUUID -o value /dev/vdb2) # 3560ffd1-39f0-44da-9c3b-a5d98ea43f08 nano /etc/fstab # USE df1701f7-6e8b-4db1-8192-3a7931e3a905 FOR /boot/efi # USE 3560ffd1-39f0-44da-9c3b-a5d98ea43f08 FOR /recovery cat /etc/fstab # PARTUUID=df1701f7-6e8b-4db1-8192-3a7931e3a905 /boot/efi vfat umask=0077 0 0 # PARTUUID=3560ffd1-39f0-44da-9c3b-a5d98ea43f08 /recovery vfat umask=0077 0 0 # UUID=c277ed84-e32f-4204-a211-1d80596e6e15 / btrfs defaults,subvol=@,ssd,noatime,space_cache,commit=120,compress=zstd 0 0 # UUID=c277ed84-e32f-4204-a211-1d80596e6e15 /home btrfs defaults,subvol=@home,ssd,noatime,space_cache,commit=120,compress=zstd 0 0 # /dev/mapper/cryptswap none swap defaults 0 0 mkswap /dev/vdb3 # Setting up swapspace version 1, size = 4 GiB (4294963200 bytes) # no label, UUID=a6a9ec65-a225-4185-8edd-f9dd3c243a2a nano /etc/crypttab # UNCOMMENT THE NOT WORKING DEVICE AND CHANGE UUID of cryptswap cat /etc/crypttab # cryptswap UUID=a6a9ec65-a225-4185-8edd-f9dd3c243a2a /dev/urandom swap,offset=1024,cipher=aes-xts-plain64,size=512 # #crypt_vda UUID=9fc916b2-bdd8-4fbd-b557-4c4366f8cd63 none luks # crypt_vdb UUID=93fc3643-a687-4a1c-9859-409b090448b9 none luks update-initramfs -c -k all exit reboot now Choose POP!_OS (degraded) in the boot menu and you can boot into your system and repair it!\nvdb is broken Let‚Äôs assume vdb is broken (to this end I shutdown the virtual machine and added a empty vdb). Now we need to open the EFI BOOT MANAGER IN BIOS and select to boot from the EFI partition on vdb. The system will not boot, but we have our recovery ‚Ä¶","date":1585699200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1655466439,"objectID":"e3efb511c361d62441a7aad593a51204","permalink":"https://mutschler.dev/linux/timeshift/","publishdate":"2020-04-01T00:00:00Z","relpermalink":"/linux/timeshift/","section":"linux","summary":"My personal experience and projects regarding Timeshift.","tags":["backup","linux","timeshift","btrfs"],"title":"Timeshift","type":"book"}]